<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Data_structure | Yuanhang Zheng]]></title>
  <link href="http://itlodge.github.io/blog/categories/data-structure/atom.xml" rel="self"/>
  <link href="http://itlodge.github.io/"/>
  <updated>2014-05-04T20:43:55+00:00</updated>
  <id>http://itlodge.github.io/</id>
  <author>
    <name><![CDATA[Yuanhang Zheng]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Implement a binary search tree]]></title>
    <link href="http://itlodge.github.io/blog/2013/10/03/implement-a-binary-search-tree/"/>
    <updated>2013-10-03T15:43:00+00:00</updated>
    <id>http://itlodge.github.io/blog/2013/10/03/implement-a-binary-search-tree</id>
    <content type="html"><![CDATA[<p>A binary search tree is very useful in solving the real world problems. The
red-black tree is one kind of binary search tree. For more information about
binary search tree, please visit the <a href="http://en.wikipedia.org/wiki/Binary_search_tree">wikipedia</a>.</p>

<p>Here is the specification of my binary search tree.</p>

<ul>
<li><p><code>BinarySearchTree()</code>, Create an empty binary search tree.</p></li>
<li><p><code>BinarySearchTree(const T&amp; root_val)</code>, Create an binary search tree whose
root node is constructed from <code>root_val</code>.</p></li>
<li><p><code>BinarySearchTree(const T values[], const size_t&amp; size)</code>, Create an binary
search tree from an array <code>values</code>.</p></li>
<li><p><code>BinarySearchTree(const BinarySearchTree&lt;T&gt;&amp; tree)</code>, Create an binary search
tree from the other tree <code>tree</code>.</p></li>
<li><p><code>const BinarySearchTree&amp; operator=(const BinarySearchTree&amp; tree)</code>, Support
assignment between trees.</p></li>
<li><p><code>~BinarySearchTree()</code>, free all the spaces.</p></li>
<li><p><code>Node&lt;T&gt; * proot() const</code>, return the root pointer.</p></li>
<li><p><code>void proot(Node&lt;T&gt; *root)</code>, set the root pointer to <code>root</code>.</p></li>
<li><p><code>const T&amp; root() const</code>, return the data stored in the root node.</p></li>
<li><p><code>bool is_empty() const</code>, return whether the tree is empty.</p></li>
<li><p><code>void insert(const T&amp; value)</code>, insert a node with <code>value</code> into the tree.</p></li>
<li><p><code>std::string inorder_string() const</code>, return the inorder travel string.</p></li>
<li><p><code>std::vector&lt;T&gt; retrieve(const T&amp; key)</code>, return the search result of key
<code>key</code>, the result may contain more than one element.</p></li>
<li><p><code>void remove(const T&amp; key)</code>, delete the node with key <code>key</code>.</p></li>
</ul>


<p>Here is the code.</p>

<p>The class definition and implementation.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (binary-search-tree.hpp)</span> <a href='/code/binary-search-tree/binary-search-tree.hpp'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
<span class='line-number'>363</span>
<span class='line-number'>364</span>
<span class='line-number'>365</span>
<span class='line-number'>366</span>
<span class='line-number'>367</span>
<span class='line-number'>368</span>
<span class='line-number'>369</span>
<span class='line-number'>370</span>
<span class='line-number'>371</span>
<span class='line-number'>372</span>
<span class='line-number'>373</span>
<span class='line-number'>374</span>
<span class='line-number'>375</span>
<span class='line-number'>376</span>
<span class='line-number'>377</span>
<span class='line-number'>378</span>
<span class='line-number'>379</span>
<span class='line-number'>380</span>
<span class='line-number'>381</span>
<span class='line-number'>382</span>
<span class='line-number'>383</span>
<span class='line-number'>384</span>
<span class='line-number'>385</span>
<span class='line-number'>386</span>
<span class='line-number'>387</span>
<span class='line-number'>388</span>
<span class='line-number'>389</span>
<span class='line-number'>390</span>
<span class='line-number'>391</span>
<span class='line-number'>392</span>
<span class='line-number'>393</span>
<span class='line-number'>394</span>
<span class='line-number'>395</span>
<span class='line-number'>396</span>
<span class='line-number'>397</span>
<span class='line-number'>398</span>
<span class='line-number'>399</span>
<span class='line-number'>400</span>
<span class='line-number'>401</span>
<span class='line-number'>402</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#ifndef _BINARY_SEARCH_TREE_H_</span>
</span><span class='line'><span class="cp">#define _BINARY_SEARCH_TREE_H_</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;functional&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Tree node.</span>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Node</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">Node</span><span class="p">()</span>
</span><span class='line'>    <span class="o">:</span><span class="n">value_</span><span class="p">(),</span> <span class="n">lch_</span><span class="p">(</span><span class="nb">NULL</span><span class="p">),</span> <span class="n">rch_</span><span class="p">(</span><span class="nb">NULL</span><span class="p">),</span> <span class="n">parent_</span><span class="p">(</span><span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Node</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">value</span><span class="p">,</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">lch</span><span class="o">=</span><span class="nb">NULL</span><span class="p">,</span>
</span><span class='line'>       <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">rch</span><span class="o">=</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">parent</span><span class="o">=</span><span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>    <span class="o">:</span><span class="n">value_</span><span class="p">(</span><span class="n">value</span><span class="p">),</span> <span class="n">lch_</span><span class="p">(</span><span class="n">lch</span><span class="p">),</span> <span class="n">rch_</span><span class="p">(</span><span class="n">rch</span><span class="p">),</span> <span class="n">parent_</span><span class="p">(</span><span class="n">parent</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">~</span><span class="n">Node</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Return the data stored in the node.</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span>
</span><span class='line'>  <span class="n">value</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'>  <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">value_</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Change the data to V.</span>
</span><span class='line'>  <span class="kt">void</span>
</span><span class='line'>  <span class="n">value</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">v</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">value_</span> <span class="o">=</span> <span class="n">v</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span>
</span><span class='line'>  <span class="n">left_child</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'>  <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">lch_</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span>
</span><span class='line'>  <span class="n">left_child</span><span class="p">(</span><span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">lch</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">lch_</span> <span class="o">=</span> <span class="n">lch</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span>
</span><span class='line'>  <span class="n">right_child</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'>  <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">rch_</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span>
</span><span class='line'>  <span class="n">right_child</span><span class="p">(</span><span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">rch</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">rch_</span> <span class="o">=</span> <span class="n">rch</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span>
</span><span class='line'>  <span class="n">parent</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'>  <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">parent_</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span>
</span><span class='line'>  <span class="n">parent</span><span class="p">(</span><span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">parent</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">parent_</span> <span class="o">=</span> <span class="n">parent</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">friend</span> <span class="n">std</span><span class="o">::</span><span class="n">ostream</span>
</span><span class='line'>  <span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="k">const</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">node</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span> <span class="k">return</span> <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">node</span><span class="p">.</span><span class="n">value</span><span class="p">();</span> <span class="p">}</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="c1">// Cannot be copied.</span>
</span><span class='line'>  <span class="k">explicit</span> <span class="n">Node</span><span class="p">(</span><span class="k">const</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">node</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">const</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span>
</span><span class='line'>  <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">node</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Data stored.</span>
</span><span class='line'>  <span class="n">T</span> <span class="n">value_</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Left child.</span>
</span><span class='line'>  <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">lch_</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Right child.</span>
</span><span class='line'>  <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">rch_</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Parent.</span>
</span><span class='line'>  <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">parent_</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// BinarySearchTree, the &quot;Node&quot; is invisible from outside.</span>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">BinarySearchTree</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">BinarySearchTree</span><span class="p">()</span>
</span><span class='line'>    <span class="o">:</span><span class="n">root_</span><span class="p">(</span><span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// [root_val] is the data to be stored in the root node.</span>
</span><span class='line'>  <span class="k">explicit</span> <span class="n">BinarySearchTree</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">root_val</span><span class="p">)</span>
</span><span class='line'>    <span class="o">:</span><span class="n">root_</span><span class="p">(</span><span class="k">new</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">root_val</span><span class="p">))</span>
</span><span class='line'>  <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">BinarySearchTree</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span> <span class="n">values</span><span class="p">[],</span> <span class="k">const</span> <span class="n">size_t</span><span class="o">&amp;</span> <span class="n">size</span><span class="p">)</span>
</span><span class='line'>    <span class="o">:</span><span class="n">root_</span><span class="p">(</span><span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">values</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">||</span> <span class="n">size</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">root_</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">values</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">-&gt;</span><span class="n">insert</span><span class="p">(</span><span class="n">values</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">BinarySearchTree</span><span class="p">(</span><span class="k">const</span> <span class="n">BinarySearchTree</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">tree</span><span class="p">)</span>
</span><span class='line'>    <span class="o">:</span><span class="n">root_</span><span class="p">(</span><span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">root_</span> <span class="o">=</span> <span class="n">new_nodes</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">root_</span><span class="p">,</span> <span class="n">tree</span><span class="p">.</span><span class="n">root_</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// This assignment function&#39;s implementation is not so effecient,</span>
</span><span class='line'>  <span class="c1">// just create a new tree from the [tree] and swap the data with the</span>
</span><span class='line'>  <span class="c1">// current tree, and then automatically delete the new tree.</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">BinarySearchTree</span><span class="o">&amp;</span>
</span><span class='line'>  <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">BinarySearchTree</span><span class="o">&amp;</span> <span class="n">tree</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">this</span> <span class="o">!=</span> <span class="o">&amp;</span><span class="n">tree</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">BinarySearchTree</span> <span class="n">tmp</span><span class="p">(</span><span class="n">tree</span><span class="p">);</span>
</span><span class='line'>      <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">.</span><span class="n">proot</span><span class="p">();</span>
</span><span class='line'>      <span class="n">tmp</span><span class="p">.</span><span class="n">proot</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">root_</span><span class="p">);</span>
</span><span class='line'>      <span class="k">this</span><span class="o">-&gt;</span><span class="n">root_</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Delete the nodes in postorder.</span>
</span><span class='line'>  <span class="o">~</span><span class="n">BinarySearchTree</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">auto</span> <span class="n">del_fun</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="o">&amp;</span><span class="n">BinarySearchTree</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">del_node</span><span class="p">,</span>
</span><span class='line'>                             <span class="k">this</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">placeholders</span><span class="o">::</span><span class="n">_1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">postorder</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">root_</span><span class="p">,</span> <span class="n">del_fun</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// This function just return the root pointer.</span>
</span><span class='line'>  <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span>
</span><span class='line'>  <span class="n">proot</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'>  <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">root_</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span>
</span><span class='line'>  <span class="n">proot</span><span class="p">(</span><span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">root</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">root_</span> <span class="o">=</span> <span class="n">root</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// But this function return the data stored in the root node.</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span>
</span><span class='line'>  <span class="n">root</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'>  <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">root_</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">();</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">bool</span>
</span><span class='line'>  <span class="n">is_empty</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'>  <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">root_</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Insert a node, duplicating is allowed.</span>
</span><span class='line'>  <span class="kt">void</span>
</span><span class='line'>  <span class="n">insert</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">root_</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">p</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">-&gt;</span><span class="n">root_</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">p</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">value</span> <span class="o">&lt;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">()</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">node</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
</span><span class='line'>          <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>          <span class="n">p</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">(</span><span class="n">node</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">()</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">node</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
</span><span class='line'>          <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>          <span class="n">p</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">(</span><span class="n">node</span><span class="p">);</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Return the inorder travel&#39;s string, just for testing.</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span>
</span><span class='line'>  <span class="n">inorder_string</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">result</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">inorder_str</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">root_</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="o">!=</span> <span class="s">&quot;&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">result</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>      <span class="n">result</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;[&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">result</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="sc">&#39;[&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">result</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="sc">&#39;]&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Return the data after search the tree in terms of the [key]. There</span>
</span><span class='line'>  <span class="c1">// may be more than one item, since we allow duplicating.</span>
</span><span class='line'>  <span class="n">T</span>
</span><span class='line'>  <span class="n">retrieve</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">key</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">search</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">root_</span><span class="p">,</span> <span class="n">key</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Remove a node in terms of the [key].</span>
</span><span class='line'>  <span class="kt">void</span>
</span><span class='line'>  <span class="n">remove</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">key</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">delete_nodes</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">root_</span><span class="p">,</span> <span class="n">key</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">friend</span> <span class="kt">bool</span>
</span><span class='line'>  <span class="k">operator</span><span class="o">==</span><span class="p">(</span><span class="k">const</span> <span class="n">BinarySearchTree</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">left</span><span class="p">,</span>
</span><span class='line'>             <span class="k">const</span> <span class="n">BinarySearchTree</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span> <span class="k">return</span> <span class="n">is_equal</span><span class="p">(</span><span class="n">left</span><span class="p">.</span><span class="n">root_</span><span class="p">,</span> <span class="n">right</span><span class="p">.</span><span class="n">root_</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">root_</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span>
</span><span class='line'>  <span class="n">inorder_str</span><span class="p">(</span><span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">root</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">result</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">seperator</span> <span class="o">=</span> <span class="s">&quot;, &quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">root</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">()</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">+=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">inorder_str</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">());</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">std</span><span class="o">::</span><span class="n">stringstream</span> <span class="n">ss</span><span class="p">;</span>
</span><span class='line'>      <span class="n">ss</span> <span class="o">&lt;&lt;</span> <span class="n">seperator</span> <span class="o">&lt;&lt;</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">();</span>
</span><span class='line'>      <span class="n">result</span> <span class="o">+=</span> <span class="n">ss</span><span class="p">.</span><span class="n">str</span><span class="p">();</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">()</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">+=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">inorder_str</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">());</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span>
</span><span class='line'>  <span class="n">postorder</span><span class="p">(</span><span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">root</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">void</span><span class="p">(</span><span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="p">)</span><span class="o">&gt;&amp;</span> <span class="n">func</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">root</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">-&gt;</span><span class="n">postorder</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">(),</span> <span class="n">func</span><span class="p">);</span>
</span><span class='line'>      <span class="k">this</span><span class="o">-&gt;</span><span class="n">postorder</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">(),</span> <span class="n">func</span><span class="p">);</span>
</span><span class='line'>      <span class="n">func</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span>
</span><span class='line'>  <span class="n">del_node</span><span class="p">(</span><span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">node</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">node</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">delete</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span>
</span><span class='line'>  <span class="n">inorder</span><span class="p">(</span><span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">root</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">void</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="o">&gt;&amp;</span> <span class="n">func</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">root</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">-&gt;</span><span class="n">inorder</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">(),</span> <span class="n">func</span><span class="p">);</span>
</span><span class='line'>      <span class="n">func</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span><span class='line'>      <span class="k">this</span><span class="o">-&gt;</span><span class="n">inorder</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">(),</span> <span class="n">func</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span>
</span><span class='line'>  <span class="n">preorder</span><span class="p">(</span><span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">root</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">void</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="o">&gt;&amp;</span> <span class="n">func</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">root</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">func</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span><span class='line'>      <span class="k">this</span><span class="o">-&gt;</span><span class="n">preorder</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">(),</span> <span class="n">func</span><span class="p">);</span>
</span><span class='line'>      <span class="k">this</span><span class="o">-&gt;</span><span class="n">preorder</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">(),</span> <span class="n">func</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span>
</span><span class='line'>  <span class="n">new_nodes</span><span class="p">(</span><span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">dest</span><span class="p">,</span> <span class="k">const</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">src</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">src</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">dest</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">dest</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">src</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">());</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">src</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">()</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">node</span> <span class="o">=</span> <span class="n">new_nodes</span><span class="p">(</span><span class="n">dest</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">(),</span>
</span><span class='line'>                                  <span class="n">src</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">());</span>
</span><span class='line'>        <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">(</span><span class="n">dest</span><span class="p">);</span>
</span><span class='line'>        <span class="n">dest</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">(</span><span class="n">node</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">src</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">()</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">node</span> <span class="o">=</span> <span class="n">new_nodes</span><span class="p">(</span><span class="n">dest</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">(),</span>
</span><span class='line'>                                  <span class="n">src</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">());</span>
</span><span class='line'>        <span class="n">node</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">(</span><span class="n">dest</span><span class="p">);</span>
</span><span class='line'>        <span class="n">dest</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">(</span><span class="n">node</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">dest</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">T</span>
</span><span class='line'>  <span class="n">search</span><span class="p">(</span><span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">root</span><span class="p">,</span> <span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">key</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">root</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">key</span> <span class="o">==</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">key</span> <span class="o">&lt;</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">root</span> <span class="o">=</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">root</span> <span class="o">=</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// [single] is whether delete a single element or multiple element of the</span>
</span><span class='line'>  <span class="c1">// same value.</span>
</span><span class='line'>  <span class="kt">void</span>
</span><span class='line'>  <span class="n">delete_nodes</span><span class="p">(</span><span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">root</span><span class="p">,</span> <span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">key</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">root</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">key</span> <span class="o">&lt;</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">-&gt;</span><span class="n">delete_nodes</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">(),</span> <span class="n">key</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">key</span> <span class="o">&gt;</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">-&gt;</span><span class="n">delete_nodes</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">(),</span> <span class="n">key</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">()</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>            <span class="n">root</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">()</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// If have two children</span>
</span><span class='line'>          <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">predecessor</span> <span class="o">=</span>
</span><span class='line'>            <span class="k">this</span><span class="o">-&gt;</span><span class="n">mini_node</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">());</span>
</span><span class='line'>          <span class="n">root</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">(</span><span class="n">predecessor</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">());</span>
</span><span class='line'>          <span class="k">this</span><span class="o">-&gt;</span><span class="n">delete_nodes</span><span class="p">(</span><span class="n">predecessor</span><span class="p">,</span> <span class="n">predecessor</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">());</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">()</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// One child(left)</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">root</span> <span class="o">==</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">root_</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="o">-&gt;</span><span class="n">root_</span> <span class="o">=</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">();</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">()</span> <span class="o">==</span> <span class="n">root</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">root</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">());</span>
</span><span class='line'>            <span class="n">root</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">());</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">root</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">());</span>
</span><span class='line'>            <span class="n">root</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">());</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">to_delete</span> <span class="o">=</span> <span class="n">root</span><span class="p">;</span>
</span><span class='line'>          <span class="n">root</span> <span class="o">=</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">();</span>
</span><span class='line'>          <span class="k">delete</span> <span class="n">to_delete</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">()</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// Right</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">root</span> <span class="o">==</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">root_</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="o">-&gt;</span><span class="n">root_</span> <span class="o">=</span> <span class="n">root</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">()</span> <span class="o">==</span> <span class="n">root</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">root</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">());</span>
</span><span class='line'>            <span class="n">root</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">());</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">root</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">());</span>
</span><span class='line'>            <span class="n">root</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">());</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">to_delete</span> <span class="o">=</span> <span class="n">root</span><span class="p">;</span>
</span><span class='line'>          <span class="n">root</span> <span class="o">=</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">();</span>
</span><span class='line'>          <span class="k">delete</span> <span class="n">to_delete</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>                  <span class="c1">// The leaf</span>
</span><span class='line'>          <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">to_delete</span> <span class="o">=</span> <span class="n">root</span><span class="p">;</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">root_</span> <span class="o">==</span> <span class="n">root</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="o">-&gt;</span><span class="n">root_</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">()</span> <span class="o">==</span> <span class="n">root</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">root</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">root</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">delete</span> <span class="n">to_delete</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Find a node of the smallest value in a subtree.</span>
</span><span class='line'>  <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span>
</span><span class='line'>  <span class="n">mini_node</span><span class="p">(</span><span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">root</span><span class="p">)</span> <span class="k">const</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">min</span> <span class="o">=</span> <span class="n">root</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="n">min</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="n">min</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">()</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">min</span> <span class="o">=</span> <span class="n">min</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">min</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* _BINARY_SEARCH_TREE_H_ */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">bool</span>
</span><span class='line'><span class="n">is_equal</span><span class="p">(</span><span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">left</span><span class="p">,</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">right</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">((</span><span class="n">left</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="n">right</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">||</span>
</span><span class='line'>      <span class="p">(</span><span class="n">left</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="n">right</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">left</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="o">&amp;&amp;</span> <span class="n">right</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">left</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">()</span> <span class="o">!=</span> <span class="n">right</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">is_equal</span><span class="p">(</span><span class="n">left</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">(),</span> <span class="n">right</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">())</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>            <span class="n">is_equal</span><span class="p">(</span><span class="n">left</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">(),</span> <span class="n">right</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">()))</span> <span class="o">||</span>
</span><span class='line'>      <span class="p">(</span><span class="n">is_equal</span><span class="p">(</span><span class="n">left</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">(),</span> <span class="n">right</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">())</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>       <span class="n">is_equal</span><span class="p">(</span><span class="n">left</span><span class="o">-&gt;</span><span class="n">right_child</span><span class="p">(),</span> <span class="n">right</span><span class="o">-&gt;</span><span class="n">left_child</span><span class="p">()));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now this the test code(Using boost unit test framework).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (binary-search-tree-test.cpp)</span> <a href='/code/binary-search-tree/binary-search-tree-test.cpp'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#define BOOST_TEST_DYN_LINK</span>
</span><span class='line'><span class="cp">#define BOOST_TEST_MAIN</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;boost/test/unit_test.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/test/output_test_stream.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &quot;binary-search-tree.hpp&quot;</span>
</span><span class='line'><span class="cp">#include &lt;cstdlib&gt;</span>
</span><span class='line'><span class="cp">#include &lt;ctime&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_SUITE</span><span class="p">(</span><span class="n">type</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">empty</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">BinarySearchTree</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">tree</span><span class="p">;</span>
</span><span class='line'>  <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">tree</span><span class="p">.</span><span class="n">is_empty</span><span class="p">());</span>
</span><span class='line'>  <span class="n">tree</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="o">!</span><span class="n">tree</span><span class="p">.</span><span class="n">is_empty</span><span class="p">());</span>
</span><span class='line'>  <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">tree</span><span class="p">.</span><span class="n">root</span><span class="p">(),</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">one_node</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">BinarySearchTree</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">tree</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">tree</span><span class="p">.</span><span class="n">root</span><span class="p">(),</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="o">!</span><span class="n">tree</span><span class="p">.</span><span class="n">is_empty</span><span class="p">());</span>
</span><span class='line'>  <span class="n">tree</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">tree</span><span class="p">.</span><span class="n">is_empty</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">from_array</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">nodes</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sc">&#39;c&#39;</span><span class="p">,</span> <span class="sc">&#39;b&#39;</span><span class="p">,</span> <span class="sc">&#39;d&#39;</span><span class="p">,</span> <span class="sc">&#39;a&#39;</span><span class="p">,</span> <span class="sc">&#39;f&#39;</span><span class="p">,</span> <span class="sc">&#39;e&#39;</span><span class="p">,</span> <span class="sc">&#39;g&#39;</span><span class="p">,</span> <span class="sc">&#39;h&#39;</span><span class="p">,</span> <span class="sc">&#39;j&#39;</span><span class="p">,</span> <span class="sc">&#39;i&#39;</span><span class="p">};</span>
</span><span class='line'>  <span class="n">BinarySearchTree</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">tree</span><span class="p">(</span><span class="n">nodes</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>  <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="o">!</span><span class="n">tree</span><span class="p">.</span><span class="n">is_empty</span><span class="p">());</span>
</span><span class='line'>  <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">tree</span><span class="p">.</span><span class="n">root</span><span class="p">(),</span> <span class="sc">&#39;c&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">expect_inorder</span> <span class="o">=</span> <span class="s">&quot;[a, b, c, d, e, f, g, h, i, j]&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">tree</span><span class="p">.</span><span class="n">inorder_string</span><span class="p">(),</span> <span class="n">expect_inorder</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">tree</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="sc">&#39;b&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">expect_inorder</span> <span class="o">=</span> <span class="s">&quot;[a, c, d, e, f, g, h, i, j]&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">tree</span><span class="p">.</span><span class="n">inorder_string</span><span class="p">(),</span> <span class="n">expect_inorder</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">copy</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">BinarySearchTree</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">t1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">BinarySearchTree</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">t2</span><span class="p">(</span><span class="n">t1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">t2</span><span class="p">.</span><span class="n">is_empty</span><span class="p">());</span>
</span><span class='line'>  <span class="n">t2</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="n">t2</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>  <span class="n">t2</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">BinarySearchTree</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">t3</span> <span class="o">=</span> <span class="n">t2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">expect_inorder</span> <span class="o">=</span> <span class="s">&quot;[1, 2, 3]&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">t3</span><span class="p">.</span><span class="n">inorder_string</span><span class="p">(),</span> <span class="n">expect_inorder</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">t3</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>  <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">t3</span><span class="p">.</span><span class="n">inorder_string</span><span class="p">(),</span> <span class="s">&quot;[1, 2]&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">assign</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">BinarySearchTree</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">t1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">BinarySearchTree</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">t2</span><span class="p">(</span><span class="n">t1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">t2</span> <span class="o">=</span> <span class="n">t1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">t2</span><span class="p">.</span><span class="n">is_empty</span><span class="p">());</span>
</span><span class='line'>  <span class="n">t1</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="n">t2</span> <span class="o">=</span> <span class="n">t1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="o">!</span><span class="n">t2</span><span class="p">.</span><span class="n">is_empty</span><span class="p">());</span>
</span><span class='line'>  <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">t2</span><span class="p">.</span><span class="n">root</span><span class="p">(),</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="n">t2</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>  <span class="n">t2</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">BinarySearchTree</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">t3</span> <span class="o">=</span> <span class="n">t2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">t3</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>  <span class="n">t1</span> <span class="o">=</span> <span class="n">t2</span> <span class="o">=</span> <span class="n">t3</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">expect_inorder</span> <span class="o">=</span> <span class="s">&quot;[1, 2, 3, 4]&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">t1</span><span class="p">.</span><span class="n">inorder_string</span><span class="p">(),</span> <span class="n">expect_inorder</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">t1</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>  <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">t1</span><span class="p">.</span><span class="n">inorder_string</span><span class="p">(),</span> <span class="s">&quot;[1, 2, 4]&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">remove</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">nodes</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sc">&#39;c&#39;</span><span class="p">,</span> <span class="sc">&#39;b&#39;</span><span class="p">,</span> <span class="sc">&#39;d&#39;</span><span class="p">,</span> <span class="sc">&#39;a&#39;</span><span class="p">,</span> <span class="sc">&#39;f&#39;</span><span class="p">,</span> <span class="sc">&#39;e&#39;</span><span class="p">,</span> <span class="sc">&#39;g&#39;</span><span class="p">,</span> <span class="sc">&#39;h&#39;</span><span class="p">,</span> <span class="sc">&#39;i&#39;</span><span class="p">,</span> <span class="sc">&#39;k&#39;</span><span class="p">};</span>
</span><span class='line'>  <span class="n">BinarySearchTree</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">tree</span><span class="p">(</span><span class="n">nodes</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">tree</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="sc">&#39;f&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">expect_inorder</span> <span class="o">=</span> <span class="s">&quot;[a, b, c, d, e, g, h, i, k]&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">tree</span><span class="p">.</span><span class="n">inorder_string</span><span class="p">(),</span> <span class="n">expect_inorder</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">tree</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="sc">&#39;i&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">expect_inorder</span> <span class="o">=</span> <span class="s">&quot;[a, b, c, d, e, g, h, k]&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">tree</span><span class="p">.</span><span class="n">inorder_string</span><span class="p">(),</span> <span class="n">expect_inorder</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">tree</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="sc">&#39;a&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">expect_inorder</span> <span class="o">=</span> <span class="s">&quot;[b, c, d, e, g, h, k]&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">tree</span><span class="p">.</span><span class="n">inorder_string</span><span class="p">(),</span> <span class="n">expect_inorder</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">tree</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="sc">&#39;c&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">expect_inorder</span> <span class="o">=</span> <span class="s">&quot;[b, d, e, g, h, k]&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">tree</span><span class="p">.</span><span class="n">inorder_string</span><span class="p">(),</span> <span class="n">expect_inorder</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">tree</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="sc">&#39;g&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">expect_inorder</span> <span class="o">=</span> <span class="s">&quot;[b, d, e, h, k]&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">tree</span><span class="p">.</span><span class="n">inorder_string</span><span class="p">(),</span> <span class="n">expect_inorder</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">tree</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="sc">&#39;d&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">expect_inorder</span> <span class="o">=</span> <span class="s">&quot;[b, e, h, k]&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">tree</span><span class="p">.</span><span class="n">inorder_string</span><span class="p">(),</span> <span class="n">expect_inorder</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">tree</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="sc">&#39;h&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">expect_inorder</span> <span class="o">=</span> <span class="s">&quot;[b, e, k]&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">tree</span><span class="p">.</span><span class="n">inorder_string</span><span class="p">(),</span> <span class="n">expect_inorder</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">tree</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="sc">&#39;e&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">expect_inorder</span> <span class="o">=</span> <span class="s">&quot;[b, k]&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">tree</span><span class="p">.</span><span class="n">inorder_string</span><span class="p">(),</span> <span class="n">expect_inorder</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">tree</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="sc">&#39;b&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">expect_inorder</span> <span class="o">=</span> <span class="s">&quot;[k]&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">tree</span><span class="p">.</span><span class="n">inorder_string</span><span class="p">(),</span> <span class="n">expect_inorder</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">tree</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="sc">&#39;k&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">expect_inorder</span> <span class="o">=</span> <span class="s">&quot;[]&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">tree</span><span class="p">.</span><span class="n">inorder_string</span><span class="p">(),</span> <span class="n">expect_inorder</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_SUITE_END</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_SUITE</span><span class="p">(</span><span class="n">compare</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">empty</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">BinarySearchTree</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">t1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">BinarySearchTree</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">t2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">t1</span> <span class="o">==</span> <span class="n">t2</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">one_node</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">BinarySearchTree</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">t1</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="n">BinarySearchTree</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">t2</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">t1</span> <span class="o">==</span> <span class="n">t2</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">random</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">int</span> <span class="n">NUM</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">a1</span><span class="p">[</span><span class="n">NUM</span><span class="p">],</span> <span class="n">a2</span><span class="p">[</span><span class="n">NUM</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">srand</span><span class="p">(</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">NUM</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">a1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">a2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">rand</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">BinarySearchTree</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">t1</span><span class="p">(</span><span class="n">a1</span><span class="p">,</span> <span class="n">NUM</span><span class="p">);</span>
</span><span class='line'>  <span class="n">BinarySearchTree</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">t2</span><span class="p">(</span><span class="n">a2</span><span class="p">,</span> <span class="n">NUM</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">t1</span> <span class="o">==</span> <span class="n">t2</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_SUITE_END</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_SUITE</span><span class="p">(</span><span class="n">record</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Record</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">Record</span><span class="p">()</span>
</span><span class='line'>    <span class="o">:</span><span class="n">key_</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">value_</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Record</span><span class="p">(</span><span class="kt">int</span> <span class="n">key</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">value</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">:</span><span class="n">key_</span><span class="p">(</span><span class="n">key</span><span class="p">),</span> <span class="n">value_</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Record</span><span class="p">(</span><span class="k">const</span> <span class="n">Record</span><span class="o">&amp;</span> <span class="n">record</span><span class="p">)</span>
</span><span class='line'>    <span class="o">:</span><span class="n">key_</span><span class="p">(</span><span class="n">record</span><span class="p">.</span><span class="n">key_</span><span class="p">),</span> <span class="n">value_</span><span class="p">(</span><span class="n">record</span><span class="p">.</span><span class="n">value_</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">const</span> <span class="n">Record</span><span class="o">&amp;</span>
</span><span class='line'>  <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">Record</span><span class="o">&amp;</span> <span class="n">record</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">key_</span> <span class="o">=</span> <span class="n">record</span><span class="p">.</span><span class="n">key_</span><span class="p">;</span>
</span><span class='line'>    <span class="k">this</span><span class="o">-&gt;</span><span class="n">value_</span> <span class="o">=</span> <span class="n">record</span><span class="p">.</span><span class="n">value_</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">~</span><span class="n">Record</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">friend</span> <span class="kt">bool</span>
</span><span class='line'>  <span class="k">operator</span><span class="o">&lt;</span><span class="p">(</span><span class="k">const</span> <span class="n">Record</span><span class="o">&amp;</span> <span class="n">left</span><span class="p">,</span> <span class="k">const</span> <span class="n">Record</span><span class="o">&amp;</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span> <span class="k">return</span> <span class="n">left</span><span class="p">.</span><span class="n">key_</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">.</span><span class="n">key_</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">friend</span> <span class="kt">bool</span>
</span><span class='line'>  <span class="k">operator</span><span class="o">&lt;=</span><span class="p">(</span><span class="k">const</span> <span class="n">Record</span><span class="o">&amp;</span> <span class="n">left</span><span class="p">,</span> <span class="k">const</span> <span class="n">Record</span><span class="o">&amp;</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span> <span class="k">return</span> <span class="n">left</span><span class="p">.</span><span class="n">key_</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="p">.</span><span class="n">key_</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">friend</span> <span class="kt">bool</span>
</span><span class='line'>  <span class="k">operator</span><span class="o">==</span><span class="p">(</span><span class="k">const</span> <span class="n">Record</span><span class="o">&amp;</span> <span class="n">left</span><span class="p">,</span> <span class="k">const</span> <span class="n">Record</span><span class="o">&amp;</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span> <span class="k">return</span> <span class="n">left</span><span class="p">.</span><span class="n">key_</span> <span class="o">==</span> <span class="n">right</span><span class="p">.</span><span class="n">key_</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">friend</span> <span class="kt">bool</span>
</span><span class='line'>  <span class="k">operator</span><span class="o">&gt;=</span><span class="p">(</span><span class="k">const</span> <span class="n">Record</span><span class="o">&amp;</span> <span class="n">left</span><span class="p">,</span> <span class="k">const</span> <span class="n">Record</span><span class="o">&amp;</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span> <span class="k">return</span> <span class="n">left</span><span class="p">.</span><span class="n">key_</span> <span class="o">&gt;=</span> <span class="n">right</span><span class="p">.</span><span class="n">key_</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">friend</span> <span class="kt">bool</span>
</span><span class='line'>  <span class="k">operator</span><span class="o">&gt;</span><span class="p">(</span><span class="k">const</span> <span class="n">Record</span><span class="o">&amp;</span> <span class="n">left</span><span class="p">,</span> <span class="k">const</span> <span class="n">Record</span><span class="o">&amp;</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span> <span class="k">return</span> <span class="n">left</span><span class="p">.</span><span class="n">key_</span> <span class="o">&gt;</span> <span class="n">right</span><span class="p">.</span><span class="n">key_</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span>
</span><span class='line'>  <span class="n">key</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">key_</span> <span class="o">=</span> <span class="n">k</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span>
</span><span class='line'>  <span class="n">value</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">v</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">value_</span> <span class="o">=</span> <span class="n">v</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span>
</span><span class='line'>  <span class="n">value</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'>  <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">value_</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">friend</span> <span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span>
</span><span class='line'>  <span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="k">const</span> <span class="n">Record</span><span class="o">&amp;</span> <span class="n">record</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span> <span class="k">return</span> <span class="p">(</span><span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">record</span><span class="p">.</span><span class="n">value_</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">key_</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">value_</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">names</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="s">&quot;Dennis Ritchie&quot;</span><span class="p">,</span> <span class="s">&quot;Bjarne Stroustrup&quot;</span><span class="p">,</span> <span class="s">&quot;Don Knuth&quot;</span><span class="p">,</span>
</span><span class='line'>                        <span class="s">&quot;Linus Torvald&quot;</span><span class="p">,</span> <span class="s">&quot;Richard Stallman&quot;</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">search</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">BinarySearchTree</span><span class="o">&lt;</span><span class="n">Record</span><span class="o">&gt;</span> <span class="n">tree</span><span class="p">;</span>
</span><span class='line'>  <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">tree</span><span class="p">.</span><span class="n">is_empty</span><span class="p">());</span>
</span><span class='line'>  <span class="n">Record</span> <span class="n">record</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">names</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">tree</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">record</span><span class="p">);</span>
</span><span class='line'>  <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">tree</span><span class="p">.</span><span class="n">root</span><span class="p">(),</span> <span class="n">record</span><span class="p">);</span>
</span><span class='line'>  <span class="n">record</span><span class="p">.</span><span class="n">key</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>  <span class="n">record</span><span class="p">.</span><span class="n">value</span><span class="p">(</span><span class="n">names</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">tree</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">record</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">record</span><span class="p">.</span><span class="n">key</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span><span class='line'>  <span class="n">record</span><span class="p">.</span><span class="n">value</span><span class="p">(</span><span class="n">names</span><span class="p">[</span><span class="mi">4</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">tree</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">record</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">record</span><span class="p">.</span><span class="n">key</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">record</span><span class="p">.</span><span class="n">value</span><span class="p">(</span><span class="n">names</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">tree</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">record</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">record</span><span class="p">.</span><span class="n">key</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'>  <span class="n">record</span><span class="p">.</span><span class="n">value</span><span class="p">(</span><span class="n">names</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">tree</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">record</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">expect_inorder</span> <span class="o">=</span> <span class="s">&quot;[Dennis Ritchie, Bjarne Stroustrup, &quot;</span>
</span><span class='line'>    <span class="s">&quot;Don Knuth, Linus Torvald, Richard Stallman]&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">tree</span><span class="p">.</span><span class="n">inorder_string</span><span class="p">(),</span> <span class="n">expect_inorder</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">Record</span> <span class="n">key</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="n">Record</span> <span class="n">result</span> <span class="o">=</span> <span class="n">tree</span><span class="p">.</span><span class="n">retrieve</span><span class="p">(</span><span class="n">key</span><span class="p">);</span>
</span><span class='line'>  <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">value</span><span class="p">(),</span> <span class="s">&quot;Bjarne Stroustrup&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_SUITE_END</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implement a queue using two stacks]]></title>
    <link href="http://itlodge.github.io/blog/2013/09/27/implement-a-queue-using-two-stacks/"/>
    <updated>2013-09-27T23:05:00+00:00</updated>
    <id>http://itlodge.github.io/blog/2013/09/27/implement-a-queue-using-two-stacks</id>
    <content type="html"><![CDATA[<p>A queue can be implemented using two stacks. One stack store the elements
appended to the queue. The other stack store the elements to be popped from
the queue.</p>

<p>Here is the specification of my Queue.</p>

<ul>
<li><code>StQueue()</code>, Create an empty queue.</li>
<li><code>StQueue(const T&amp; value)</code>, Create a queue whose first element is
<code>value</code>.</li>
<li><code>StQueue(const T values[], const size_t&amp; size)</code>, Create a queue from an
array <code>values</code> whose size is <code>size</code>.</li>
<li><code>StQueue(const StQueue&lt;T&gt;&amp; queue)</code>, Create a queue from another queue.</li>
<li><code>const StQueue&lt;T&gt;&amp; operator=(const StQueue&lt;T&gt;&amp; queue)</code>, Support queue
assignment.</li>
<li><code>~StQueue()</code>, Free all the spaces allocated by the queue.</li>
<li><code>std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const StQueue&lt;T&gt;&amp; queue)</code>,
Output the queue in the form <strong>[1 | 2 | 3]</strong>.</li>
<li><code>const T&amp; head() const</code>, return the head element of the queue.</li>
<li><code>size_t size() const</code>, return the size of the queue.</li>
<li><code>void enQueue(const T&amp; value)</code>, append the element <code>value</code> into the
back of the queue.</li>
<li><code>const T deQueue()</code>, remove and return the first element of the queue.</li>
</ul>


<p>Here is the code.</p>

<p>The class definition and implementation.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (st-queue.hpp)</span> <a href='/code/st-queue/st-queue.hpp'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &quot;stack.hpp&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">StQueue</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">explicit</span> <span class="n">StQueue</span><span class="p">()</span>
</span><span class='line'>        <span class="o">:</span><span class="n">in_stack_</span><span class="p">(</span><span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">()),</span> <span class="n">out_stack_</span><span class="p">(</span><span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">()),</span> <span class="n">size_</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">explicit</span> <span class="n">StQueue</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="o">:</span><span class="n">in_stack_</span><span class="p">(</span><span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">value</span><span class="p">)),</span> <span class="n">out_stack_</span><span class="p">(</span><span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">()),</span> <span class="n">size_</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">explicit</span> <span class="n">StQueue</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span> <span class="n">values</span><span class="p">[],</span> <span class="k">const</span> <span class="n">size_t</span><span class="o">&amp;</span> <span class="n">size</span><span class="p">)</span>
</span><span class='line'>        <span class="o">:</span><span class="n">in_stack_</span><span class="p">(</span><span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">values</span><span class="p">,</span> <span class="n">size</span><span class="p">)),</span> <span class="n">out_stack_</span><span class="p">(</span><span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">()),</span>
</span><span class='line'>         <span class="n">size_</span><span class="p">(</span><span class="n">size</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">explicit</span> <span class="n">StQueue</span><span class="p">(</span><span class="k">const</span> <span class="n">StQueue</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">queue</span><span class="p">)</span>
</span><span class='line'>        <span class="o">:</span><span class="n">in_stack_</span><span class="p">(</span><span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="o">*</span><span class="n">queue</span><span class="p">.</span><span class="n">in_stack_</span><span class="p">)),</span>
</span><span class='line'>         <span class="n">out_stack_</span><span class="p">(</span><span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="o">*</span><span class="n">queue</span><span class="p">.</span><span class="n">out_stack_</span><span class="p">)),</span>
</span><span class='line'>         <span class="n">size_</span><span class="p">(</span><span class="n">queue</span><span class="p">.</span><span class="n">size_</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">const</span> <span class="n">StQueue</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span>
</span><span class='line'>    <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">StQueue</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">queue</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">in_stack_</span> <span class="o">==</span> <span class="n">queue</span><span class="p">.</span><span class="n">in_stack_</span>
</span><span class='line'>            <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">out_stack_</span> <span class="o">==</span> <span class="n">queue</span><span class="p">.</span><span class="n">out_stack_</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="o">*</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">in_stack_</span><span class="p">)</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">queue</span><span class="p">.</span><span class="n">in_stack_</span><span class="p">);</span>
</span><span class='line'>        <span class="o">*</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">out_stack_</span><span class="p">)</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">queue</span><span class="p">.</span><span class="n">out_stack_</span><span class="p">);</span>
</span><span class='line'>        <span class="k">this</span><span class="o">-&gt;</span><span class="n">size_</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="n">size_</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">~</span><span class="n">StQueue</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">in_stack_</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">delete</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">in_stack_</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">out_stack_</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">delete</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">out_stack_</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">friend</span> <span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span>
</span><span class='line'>    <span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="k">const</span> <span class="n">StQueue</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">queue</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">pout</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="n">out_stack_</span><span class="o">-&gt;</span><span class="n">ptop</span><span class="p">();</span>
</span><span class='line'>        <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">pin</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="n">in_stack_</span><span class="o">-&gt;</span><span class="n">ptop</span><span class="p">();</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">seperator</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="sc">&#39;[&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">pout</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">seperator</span> <span class="o">&lt;&lt;</span> <span class="n">pout</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">();</span>
</span><span class='line'>            <span class="n">seperator</span> <span class="o">=</span> <span class="s">&quot; | &quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="n">pout</span> <span class="o">=</span> <span class="n">pout</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">pin</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Stack</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">temp</span><span class="p">;</span>
</span><span class='line'>            <span class="k">while</span> <span class="p">(</span><span class="n">pin</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">temp</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">pin</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">());</span>
</span><span class='line'>                <span class="n">pin</span> <span class="o">=</span> <span class="n">pin</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">while</span> <span class="p">(</span><span class="n">temp</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">seperator</span> <span class="o">&lt;&lt;</span> <span class="n">temp</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>                <span class="n">seperator</span> <span class="o">=</span> <span class="s">&quot; | &quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="sc">&#39;]&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">os</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span>
</span><span class='line'>    <span class="n">enQueue</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">-&gt;</span><span class="n">in_stack_</span><span class="o">-&gt;</span><span class="n">push</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
</span><span class='line'>        <span class="o">++</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">size_</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">const</span> <span class="n">T</span>
</span><span class='line'>    <span class="n">deQueue</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">size_</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;The queue is empty!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">out_stack_</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">()</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">while</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">in_stack_</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">this</span><span class="o">-&gt;</span><span class="n">out_stack_</span><span class="o">-&gt;</span><span class="n">push</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">in_stack_</span><span class="o">-&gt;</span><span class="n">pop</span><span class="p">());</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="o">--</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">size_</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">out_stack_</span><span class="o">-&gt;</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">const</span> <span class="n">size_t</span><span class="o">&amp;</span>
</span><span class='line'>    <span class="n">size</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'>    <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">size_</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span>
</span><span class='line'>    <span class="n">head</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">size_</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;The queue is empty!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">out_stack_</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">()</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">while</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">in_stack_</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">this</span><span class="o">-&gt;</span><span class="n">out_stack_</span><span class="o">-&gt;</span><span class="n">push</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">in_stack_</span><span class="o">-&gt;</span><span class="n">pop</span><span class="p">());</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">out_stack_</span><span class="o">-&gt;</span><span class="n">top</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Stack</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">in_stack_</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Stack</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">out_stack_</span><span class="p">;</span>
</span><span class='line'>    <span class="n">size_t</span> <span class="n">size_</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now this the test code(Using boost unit test framework).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (st-queue-test.cpp)</span> <a href='/code/st-queue/st-queue-test.cpp'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#define BOOST_TEST_DYN_LINK</span>
</span><span class='line'><span class="cp">#define BOOST_TEST_MAIN</span>
</span><span class='line'><span class="cp">#include &lt;boost/test/unit_test.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/test/output_test_stream.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &quot;st-queue.hpp&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_SUITE</span><span class="p">(</span><span class="n">test_create</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">create_empty</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">StQueue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">queue</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">queue</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
</span><span class='line'>    <span class="n">StQueue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">queue2</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">queue2</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">create_with_one_element</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">StQueue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">queue_int</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">queue_int</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">queue_int</span><span class="p">.</span><span class="n">head</span><span class="p">(),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">StQueue</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">queue_char</span><span class="p">(</span><span class="sc">&#39;a&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">queue_char</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">queue_char</span><span class="p">.</span><span class="n">head</span><span class="p">(),</span> <span class="sc">&#39;a&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">StQueue</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">queue_double</span><span class="p">(</span><span class="mf">1.23</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">queue_double</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">queue_double</span><span class="p">.</span><span class="n">head</span><span class="p">(),</span> <span class="mf">1.23</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">StQueue</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">queue_str</span><span class="p">(</span><span class="s">&quot;abc&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">queue_str</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">queue_str</span><span class="p">.</span><span class="n">head</span><span class="p">(),</span> <span class="s">&quot;abc&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">create_with_an_array</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">};</span>
</span><span class='line'>    <span class="n">StQueue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">queue</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>    <span class="n">boost</span><span class="o">::</span><span class="n">test_tools</span><span class="o">::</span><span class="n">output_test_stream</span> <span class="n">output</span><span class="p">;</span>
</span><span class='line'>    <span class="n">output</span> <span class="o">&lt;&lt;</span> <span class="n">queue</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">output</span><span class="p">.</span><span class="n">is_equal</span><span class="p">(</span><span class="s">&quot;[1 | 2 | 3 | 4 | 5]&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">create_copy_empty</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">StQueue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">queue1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StQueue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">();</span>
</span><span class='line'>    <span class="n">StQueue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">queue2</span><span class="p">(</span><span class="o">*</span><span class="n">queue1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">delete</span> <span class="n">queue1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">queue2</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">create_copy_one</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">StQueue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">queue1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StQueue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>    <span class="n">StQueue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">queue2</span><span class="p">(</span><span class="o">*</span><span class="n">queue1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">delete</span> <span class="n">queue1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">queue2</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">queue2</span><span class="p">.</span><span class="n">head</span><span class="p">(),</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">create_and_assign</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">};</span>
</span><span class='line'>    <span class="n">StQueue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">queue1</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">};</span>
</span><span class='line'>    <span class="n">StQueue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">queue2</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">queue1</span> <span class="o">=</span> <span class="n">queue2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">boost</span><span class="o">::</span><span class="n">test_tools</span><span class="o">::</span><span class="n">output_test_stream</span> <span class="n">output</span><span class="p">;</span>
</span><span class='line'>    <span class="n">output</span> <span class="o">&lt;&lt;</span> <span class="n">queue1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">output</span><span class="p">.</span><span class="n">is_equal</span><span class="p">(</span><span class="s">&quot;[4 | 5]&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">queue1</span> <span class="o">=</span> <span class="n">queue1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">queue1</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">output</span> <span class="o">&lt;&lt;</span> <span class="n">queue1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">output</span><span class="p">.</span><span class="n">is_equal</span><span class="p">(</span><span class="s">&quot;[4 | 5]&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">assign_empty</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">StQueue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">queue1</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">StQueue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">queue2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">queue1</span> <span class="o">=</span> <span class="n">queue2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">queue1</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">queue1</span> <span class="o">=</span> <span class="n">queue1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">queue1</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_SUITE_END</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_SUITE</span><span class="p">(</span><span class="n">test_output</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">ouput_empty</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">StQueue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">queue</span><span class="p">;</span>
</span><span class='line'>    <span class="n">boost</span><span class="o">::</span><span class="n">test_tools</span><span class="o">::</span><span class="n">output_test_stream</span> <span class="n">output</span><span class="p">;</span>
</span><span class='line'>    <span class="n">output</span> <span class="o">&lt;&lt;</span> <span class="n">queue</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">output</span><span class="p">.</span><span class="n">is_equal</span><span class="p">(</span><span class="s">&quot;[]&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">output_one</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">StQueue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">queue</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">boost</span><span class="o">::</span><span class="n">test_tools</span><span class="o">::</span><span class="n">output_test_stream</span> <span class="n">output</span><span class="p">;</span>
</span><span class='line'>    <span class="n">output</span> <span class="o">&lt;&lt;</span> <span class="n">queue</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">output</span><span class="p">.</span><span class="n">is_equal</span><span class="p">(</span><span class="s">&quot;[2]&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">output</span> <span class="o">&lt;&lt;</span> <span class="n">queue</span><span class="p">.</span><span class="n">head</span><span class="p">();</span>
</span><span class='line'>    <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">output</span><span class="p">.</span><span class="n">is_equal</span><span class="p">(</span><span class="s">&quot;2&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_SUITE_END</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_SUITE</span><span class="p">(</span><span class="n">test_enQueue</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">empty</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">StQueue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">queue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">queue</span><span class="p">.</span><span class="n">enQueue</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">boost</span><span class="o">::</span><span class="n">test_tools</span><span class="o">::</span><span class="n">output_test_stream</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'>    <span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="n">queue</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">out</span><span class="p">.</span><span class="n">is_equal</span><span class="p">(</span><span class="s">&quot;[1]&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">queue</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">normal</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">};</span>
</span><span class='line'>    <span class="n">StQueue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">queue</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">queue</span><span class="p">.</span><span class="n">enQueue</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">boost</span><span class="o">::</span><span class="n">test_tools</span><span class="o">::</span><span class="n">output_test_stream</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'>    <span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="n">queue</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">out</span><span class="p">.</span><span class="n">is_equal</span><span class="p">(</span><span class="s">&quot;[1 | 1 | 1 | 1 | 1 | 2]&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">queue</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_SUITE_END</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_SUITE</span><span class="p">(</span><span class="n">test_deStQueue</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">one</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">StQueue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">queue</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">head</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="n">deQueue</span><span class="p">();</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">queue</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">normal</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">};</span>
</span><span class='line'>    <span class="n">StQueue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">queue</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">head</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="n">deQueue</span><span class="p">();</span>
</span><span class='line'>    <span class="n">boost</span><span class="o">::</span><span class="n">test_tools</span><span class="o">::</span><span class="n">output_test_stream</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'>    <span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="n">queue</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">out</span><span class="p">.</span><span class="n">is_equal</span><span class="p">(</span><span class="s">&quot;[2 | 3 | 4 | 5]&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">head</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="n">deQueue</span><span class="p">();</span>
</span><span class='line'>    <span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="n">queue</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">out</span><span class="p">.</span><span class="n">is_equal</span><span class="p">(</span><span class="s">&quot;[3 | 4 | 5]&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_SUITE_END</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implement a stack]]></title>
    <link href="http://itlodge.github.io/blog/2013/09/26/implement-a-stack/"/>
    <updated>2013-09-26T21:10:00+00:00</updated>
    <id>http://itlodge.github.io/blog/2013/09/26/implement-a-stack</id>
    <content type="html"><![CDATA[<p>A stack is based on the Linked List. The most explicit feature of a stack
is FILO(First in last out).</p>

<p>Here is the specification of my Stack.</p>

<ul>
<li><code>Stack()</code>, Create an empty stack.</li>
<li><code>Stack(const T&amp; value)</code>, Create a stack whose first element is <code>value</code>.</li>
<li><code>Stack(const T values[], const size_t&amp; size)</code>, Create a stack from an
array <code>values</code> whose size is <code>size</code>.</li>
<li><code>Stack(const Stack&lt;T&gt;&amp; stack)</code>, Create a stack from another stack.</li>
<li><code>const Stack&lt;T&gt;&amp; operator=(const Stack&lt;T&gt;&amp; stack)</code>, Support stack
assignment.</li>
<li><code>~Stack()</code>, Free all the spaces allocated by the stack.</li>
<li><code>std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const Stack&lt;T&gt;&amp; stack)</code>,
Output the stack in the form <strong>[1 | 2 | 3]</strong>.</li>
<li><code>const T&amp; top() const</code>, return the head element of the stack.</li>
<li><code>size_t size() const</code>, return the size of the stack.</li>
<li><code>void push(const T&amp; value)</code>, append the element <code>value</code> into the
back of the stack.</li>
<li><code>const T pop()</code>, remove and return the first element of the stack.</li>
<li><code>Node&lt;T&gt; * ptop() const</code>, return the top pointer.</li>
</ul>


<p>Here is the code.</p>

<p>The class definition and Implementation.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (stack.hpp)</span> <a href='/code/stack/stack.hpp'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#ifndef _STACK_H_</span>
</span><span class='line'><span class="cp">#define _STACK_H_</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdlib&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Node</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">explicit</span> <span class="n">Node</span><span class="p">()</span>
</span><span class='line'>        <span class="o">:</span><span class="n">value_</span><span class="p">(),</span> <span class="n">next_</span><span class="p">(</span><span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">explicit</span> <span class="n">Node</span><span class="p">(</span><span class="k">const</span> <span class="n">Node</span><span class="o">&amp;</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'>        <span class="o">:</span><span class="n">value_</span><span class="p">(</span><span class="n">n</span><span class="p">.</span><span class="n">value_</span><span class="p">),</span> <span class="n">next_</span><span class="p">(</span><span class="n">n</span><span class="p">.</span><span class="n">next_</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">explicit</span> <span class="n">Node</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">value</span><span class="p">,</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">next</span><span class="o">=</span><span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">-&gt;</span><span class="n">value_</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">-&gt;</span><span class="n">next_</span> <span class="o">=</span> <span class="n">next</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">Node</span><span class="o">&amp;</span>
</span><span class='line'>    <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">Node</span><span class="o">&amp;</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">-&gt;</span><span class="n">value_</span> <span class="o">=</span> <span class="n">n</span><span class="p">.</span><span class="n">value_</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">-&gt;</span><span class="n">next_</span> <span class="o">=</span> <span class="n">n</span><span class="p">.</span><span class="n">next_</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="o">~</span><span class="n">Node</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">friend</span> <span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span>
</span><span class='line'>    <span class="k">operator</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="k">const</span> <span class="n">Node</span><span class="o">&amp;</span> <span class="n">node</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span> <span class="k">return</span> <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">node</span><span class="p">.</span><span class="n">value_</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span>
</span><span class='line'>    <span class="n">value</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'>    <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">value_</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Set the node&#39;s value to VALUE.</span>
</span><span class='line'>    <span class="kt">void</span>
</span><span class='line'>    <span class="n">value</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">value_</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span>
</span><span class='line'>    <span class="n">next</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'>    <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">next_</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Set the &#39;next_&#39; pointer to the pointer NEXT.</span>
</span><span class='line'>    <span class="kt">void</span>
</span><span class='line'>    <span class="n">next</span><span class="p">(</span><span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">next</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">next_</span> <span class="o">=</span> <span class="n">next</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">next_</span><span class="p">;</span>
</span><span class='line'>    <span class="n">T</span> <span class="n">value_</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Stack</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">explicit</span> <span class="n">Stack</span><span class="p">()</span>
</span><span class='line'>        <span class="o">:</span><span class="n">top_</span><span class="p">(</span><span class="nb">NULL</span><span class="p">),</span> <span class="n">size_</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">explicit</span> <span class="n">Stack</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="o">:</span><span class="n">top_</span><span class="p">(</span><span class="k">new</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">value</span><span class="p">)),</span> <span class="n">size_</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">explicit</span> <span class="n">Stack</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span> <span class="n">values</span><span class="p">[],</span> <span class="k">const</span> <span class="n">size_t</span><span class="o">&amp;</span> <span class="n">size</span><span class="p">)</span>
</span><span class='line'>        <span class="o">:</span><span class="n">top_</span><span class="p">(</span><span class="nb">NULL</span><span class="p">),</span> <span class="n">size_</span><span class="p">(</span><span class="n">size</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="o">-&gt;</span><span class="n">top_</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">values</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">node</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">values</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">top_</span><span class="p">);</span>
</span><span class='line'>                <span class="k">this</span><span class="o">-&gt;</span><span class="n">top_</span> <span class="o">=</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">explicit</span> <span class="n">Stack</span><span class="p">(</span><span class="k">const</span> <span class="n">Stack</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">stack</span><span class="p">)</span>
</span><span class='line'>        <span class="o">:</span><span class="n">top_</span><span class="p">(</span><span class="nb">NULL</span><span class="p">),</span> <span class="n">size_</span><span class="p">(</span><span class="n">stack</span><span class="p">.</span><span class="n">size_</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">stack</span><span class="p">.</span><span class="n">size_</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">stack</span><span class="p">.</span><span class="n">top_</span><span class="p">;</span>
</span><span class='line'>            <span class="k">this</span><span class="o">-&gt;</span><span class="n">top_</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">());</span>
</span><span class='line'>            <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>            <span class="k">while</span> <span class="p">(</span><span class="n">p</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">node</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">(),</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">top_</span><span class="p">);</span>
</span><span class='line'>                <span class="k">this</span><span class="o">-&gt;</span><span class="n">top_</span> <span class="o">=</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'>                <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">const</span> <span class="n">Stack</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span>
</span><span class='line'>    <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">Stack</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">stack</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">pleft</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">top_</span><span class="p">;</span>
</span><span class='line'>        <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">pright</span> <span class="o">=</span> <span class="n">stack</span><span class="p">.</span><span class="n">top_</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">pleft</span> <span class="o">==</span> <span class="n">pright</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">pright</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">pleft</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">pleft</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">pright</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">());</span>
</span><span class='line'>                <span class="k">this</span><span class="o">-&gt;</span><span class="n">top_</span> <span class="o">=</span> <span class="n">pleft</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">pleft</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">(</span><span class="n">pright</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">());</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">pright</span> <span class="o">=</span> <span class="n">pright</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">pright</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">pleft</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">()</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">node</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">pright</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">());</span>
</span><span class='line'>                <span class="n">pleft</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">(</span><span class="n">node</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">pleft</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>                <span class="n">p</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">(</span><span class="n">pright</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">());</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">pleft</span> <span class="o">=</span> <span class="n">pleft</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>            <span class="n">pright</span> <span class="o">=</span> <span class="n">pright</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">pprev</span> <span class="o">=</span> <span class="n">pleft</span><span class="p">;</span>
</span><span class='line'>        <span class="n">pleft</span> <span class="o">=</span> <span class="n">pleft</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>        <span class="n">pprev</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">pleft</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">to_delete</span> <span class="o">=</span> <span class="n">pleft</span><span class="p">;</span>
</span><span class='line'>            <span class="n">pleft</span> <span class="o">=</span> <span class="n">pleft</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>            <span class="k">delete</span> <span class="n">to_delete</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">this</span><span class="o">-&gt;</span><span class="n">size_</span> <span class="o">=</span> <span class="n">stack</span><span class="p">.</span><span class="n">size_</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">~</span><span class="n">Stack</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">top_</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">p</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">to_delete</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>            <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>            <span class="k">delete</span> <span class="n">to_delete</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">this</span><span class="o">-&gt;</span><span class="n">top_</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">friend</span> <span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span>
</span><span class='line'>    <span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="k">const</span> <span class="n">Stack</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">stack</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">stack</span><span class="p">.</span><span class="n">top_</span><span class="p">;</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">seperator</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;[&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">p</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">seperator</span> <span class="o">&lt;&lt;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">();</span>
</span><span class='line'>            <span class="n">seperator</span> <span class="o">=</span> <span class="s">&quot; | &quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;]&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">os</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span>
</span><span class='line'>    <span class="n">top</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'>    <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">top_</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">();</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span>
</span><span class='line'>    <span class="n">push</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">node</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">top_</span><span class="p">);</span>
</span><span class='line'>        <span class="k">this</span><span class="o">-&gt;</span><span class="n">top_</span> <span class="o">=</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'>        <span class="o">++</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">size_</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">const</span> <span class="n">T</span>
</span><span class='line'>    <span class="n">pop</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">to_delete</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">top_</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">-&gt;</span><span class="n">top_</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">top_</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>        <span class="n">T</span> <span class="n">top_value</span> <span class="o">=</span> <span class="n">to_delete</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">();</span>
</span><span class='line'>        <span class="k">delete</span> <span class="n">to_delete</span><span class="p">;</span>
</span><span class='line'>        <span class="o">--</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">size_</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">top_value</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">const</span> <span class="n">size_t</span><span class="o">&amp;</span>
</span><span class='line'>    <span class="n">size</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'>    <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">size_</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span>
</span><span class='line'>    <span class="n">ptop</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'>    <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">top_</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">top_</span><span class="p">;</span>
</span><span class='line'>    <span class="n">size_t</span> <span class="n">size_</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* _STACK_H_ */</span><span class="cp"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now this the test code(Using boost unit test framework).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (stack-test.cpp)</span> <a href='/code/stack/stack-test.cpp'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#define BOOST_TEST_DYN_LINK</span>
</span><span class='line'><span class="cp">#define BOOST_TEST_MAIN</span>
</span><span class='line'><span class="cp">#include &lt;boost/test/unit_test.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/test/output_test_stream.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &quot;stack.hpp&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_SUITE</span><span class="p">(</span><span class="n">test_create</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">create_empty</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Stack</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">stack</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">stack</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
</span><span class='line'>    <span class="n">Stack</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">stack2</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">stack2</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">create_with_one_element</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Stack</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">stack_int</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">stack_int</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">stack_int</span><span class="p">.</span><span class="n">top</span><span class="p">(),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Stack</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">stack_char</span><span class="p">(</span><span class="sc">&#39;a&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">stack_char</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">stack_char</span><span class="p">.</span><span class="n">top</span><span class="p">(),</span> <span class="sc">&#39;a&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Stack</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">stack_double</span><span class="p">(</span><span class="mf">1.23</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">stack_double</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">stack_double</span><span class="p">.</span><span class="n">top</span><span class="p">(),</span> <span class="mf">1.23</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Stack</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">stack_str</span><span class="p">(</span><span class="s">&quot;abc&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">stack_str</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">stack_str</span><span class="p">.</span><span class="n">top</span><span class="p">(),</span> <span class="s">&quot;abc&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">create_with_an_array</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">};</span>
</span><span class='line'>    <span class="n">Stack</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">stack</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>    <span class="n">boost</span><span class="o">::</span><span class="n">test_tools</span><span class="o">::</span><span class="n">output_test_stream</span> <span class="n">output</span><span class="p">;</span>
</span><span class='line'>    <span class="n">output</span> <span class="o">&lt;&lt;</span> <span class="n">stack</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">output</span><span class="p">.</span><span class="n">is_equal</span><span class="p">(</span><span class="s">&quot;[5 | 4 | 3 | 2 | 1]&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">create_copy_empty</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Stack</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">stack1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">();</span>
</span><span class='line'>    <span class="n">Stack</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">stack2</span><span class="p">(</span><span class="o">*</span><span class="n">stack1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">delete</span> <span class="n">stack1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">stack2</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">create_copy_one</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Stack</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">stack1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Stack</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">stack2</span><span class="p">(</span><span class="o">*</span><span class="n">stack1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">delete</span> <span class="n">stack1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">stack2</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">stack2</span><span class="p">.</span><span class="n">top</span><span class="p">(),</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">create_and_assign</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">};</span>
</span><span class='line'>    <span class="n">Stack</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">stack1</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">};</span>
</span><span class='line'>    <span class="n">Stack</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">stack2</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">stack1</span> <span class="o">=</span> <span class="n">stack2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">boost</span><span class="o">::</span><span class="n">test_tools</span><span class="o">::</span><span class="n">output_test_stream</span> <span class="n">output</span><span class="p">;</span>
</span><span class='line'>    <span class="n">output</span> <span class="o">&lt;&lt;</span> <span class="n">stack1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">output</span><span class="p">.</span><span class="n">is_equal</span><span class="p">(</span><span class="s">&quot;[5 | 4]&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">stack1</span> <span class="o">=</span> <span class="n">stack1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">stack1</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">output</span> <span class="o">&lt;&lt;</span> <span class="n">stack1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">output</span><span class="p">.</span><span class="n">is_equal</span><span class="p">(</span><span class="s">&quot;[5 | 4]&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">assign_empty</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Stack</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">stack1</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Stack</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">stack2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">stack1</span> <span class="o">=</span> <span class="n">stack2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">stack1</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">stack1</span> <span class="o">=</span> <span class="n">stack1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">stack1</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_SUITE_END</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_SUITE</span><span class="p">(</span><span class="n">test_output</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">ouput_empty</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Stack</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">stack</span><span class="p">;</span>
</span><span class='line'>    <span class="n">boost</span><span class="o">::</span><span class="n">test_tools</span><span class="o">::</span><span class="n">output_test_stream</span> <span class="n">output</span><span class="p">;</span>
</span><span class='line'>    <span class="n">output</span> <span class="o">&lt;&lt;</span> <span class="n">stack</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">output</span><span class="p">.</span><span class="n">is_equal</span><span class="p">(</span><span class="s">&quot;[]&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">output_one</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Stack</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">stack</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">boost</span><span class="o">::</span><span class="n">test_tools</span><span class="o">::</span><span class="n">output_test_stream</span> <span class="n">output</span><span class="p">;</span>
</span><span class='line'>    <span class="n">output</span> <span class="o">&lt;&lt;</span> <span class="n">stack</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">output</span><span class="p">.</span><span class="n">is_equal</span><span class="p">(</span><span class="s">&quot;[2]&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">output</span> <span class="o">&lt;&lt;</span> <span class="n">stack</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span><span class='line'>    <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">output</span><span class="p">.</span><span class="n">is_equal</span><span class="p">(</span><span class="s">&quot;2&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_SUITE_END</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_SUITE</span><span class="p">(</span><span class="n">test_push</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">empty</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Stack</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">stack</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">stack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">boost</span><span class="o">::</span><span class="n">test_tools</span><span class="o">::</span><span class="n">output_test_stream</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'>    <span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="n">stack</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">out</span><span class="p">.</span><span class="n">is_equal</span><span class="p">(</span><span class="s">&quot;[1]&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">stack</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">normal</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">};</span>
</span><span class='line'>    <span class="n">Stack</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">stack</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">stack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">boost</span><span class="o">::</span><span class="n">test_tools</span><span class="o">::</span><span class="n">output_test_stream</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'>    <span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="n">stack</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">out</span><span class="p">.</span><span class="n">is_equal</span><span class="p">(</span><span class="s">&quot;[2 | 1 | 1 | 1 | 1 | 1]&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">stack</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_SUITE_END</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_SUITE</span><span class="p">(</span><span class="n">test_pop</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">one</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Stack</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">stack</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">head</span> <span class="o">=</span> <span class="n">stack</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">stack</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">normal</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">};</span>
</span><span class='line'>    <span class="n">Stack</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">stack</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">head</span> <span class="o">=</span> <span class="n">stack</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>    <span class="n">boost</span><span class="o">::</span><span class="n">test_tools</span><span class="o">::</span><span class="n">output_test_stream</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'>    <span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="n">stack</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">out</span><span class="p">.</span><span class="n">is_equal</span><span class="p">(</span><span class="s">&quot;[4 | 3 | 2 | 1]&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>    <span class="n">head</span> <span class="o">=</span> <span class="n">stack</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class='line'>    <span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="n">stack</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">out</span><span class="p">.</span><span class="n">is_equal</span><span class="p">(</span><span class="s">&quot;[3 | 2 | 1]&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_SUITE_END</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implement a queue]]></title>
    <link href="http://itlodge.github.io/blog/2013/09/25/implement-a-queue/"/>
    <updated>2013-09-25T22:54:00+00:00</updated>
    <id>http://itlodge.github.io/blog/2013/09/25/implement-a-queue</id>
    <content type="html"><![CDATA[<p>A queue is based on the Linked List. The most explicit feature of a queue
is FIFO(First in first out).</p>

<p>Here is the specification of my Queue.</p>

<ul>
<li><code>Queue()</code>, Create an empty queue.</li>
<li><code>Queue(const T&amp; value)</code>, Create a queue whose first element is
<code>value</code>.</li>
<li><code>Queue(const T values[], const size_t&amp; size)</code>, Create a queue from an
array <code>values</code> whose size is <code>size</code>.</li>
<li><code>Queue(const Queue&lt;T&gt;&amp; queue)</code>, Create a queue from another queue.</li>
<li><code>const Queue&lt;T&gt;&amp; operator=(const Queue&lt;T&gt;&amp; queue)</code>, Support queue
assignment.</li>
<li><code>~Queue()</code>, Free all the spaces allocated by the queue.</li>
<li><code>std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const Queue&lt;T&gt;&amp; queue)</code>,
Output the queue in the form <strong>[1 | 2 | 3]</strong>.</li>
<li><code>const T&amp; head() const</code>, return the head element of the queue.</li>
<li><code>size_t size() const</code>, return the size of the queue.</li>
<li><code>void enQueue(const T&amp; value)</code>, append the element <code>value</code> into the
back of the queue.</li>
<li><code>const T deQueue()</code>, remove and return the first element of the queue.</li>
</ul>


<p>Here is the code.</p>

<p>The class definition and implementation.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (queue.hpp)</span> <a href='/code/queue/queue.hpp'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#ifndef _QUEUE_H_</span>
</span><span class='line'><span class="cp">#define _QUEUE_H_</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdlib&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Node</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">explicit</span> <span class="n">Node</span><span class="p">()</span>
</span><span class='line'>        <span class="o">:</span><span class="n">value_</span><span class="p">(),</span> <span class="n">next_</span><span class="p">(</span><span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">explicit</span> <span class="n">Node</span><span class="p">(</span><span class="k">const</span> <span class="n">Node</span><span class="o">&amp;</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'>        <span class="o">:</span><span class="n">value_</span><span class="p">(</span><span class="n">n</span><span class="p">.</span><span class="n">value_</span><span class="p">),</span> <span class="n">next_</span><span class="p">(</span><span class="n">n</span><span class="p">.</span><span class="n">next_</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">explicit</span> <span class="n">Node</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">value</span><span class="p">,</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">next</span><span class="o">=</span><span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">-&gt;</span><span class="n">value_</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">-&gt;</span><span class="n">next_</span> <span class="o">=</span> <span class="n">next</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">Node</span><span class="o">&amp;</span>
</span><span class='line'>    <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">Node</span><span class="o">&amp;</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">-&gt;</span><span class="n">value_</span> <span class="o">=</span> <span class="n">n</span><span class="p">.</span><span class="n">value_</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">-&gt;</span><span class="n">next_</span> <span class="o">=</span> <span class="n">n</span><span class="p">.</span><span class="n">next_</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="o">~</span><span class="n">Node</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">friend</span> <span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span>
</span><span class='line'>    <span class="k">operator</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="k">const</span> <span class="n">Node</span><span class="o">&amp;</span> <span class="n">node</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span> <span class="k">return</span> <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">node</span><span class="p">.</span><span class="n">value_</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span>
</span><span class='line'>    <span class="n">value</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'>    <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">value_</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span>
</span><span class='line'>    <span class="n">value</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">value_</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span>
</span><span class='line'>    <span class="n">next</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'>    <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">next_</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Set the &#39;next_&#39; pointer to the pointer NEXT.</span>
</span><span class='line'>    <span class="kt">void</span>
</span><span class='line'>    <span class="n">next</span><span class="p">(</span><span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">next</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">next_</span> <span class="o">=</span> <span class="n">next</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">next_</span><span class="p">;</span>
</span><span class='line'>    <span class="n">T</span> <span class="n">value_</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Queue</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">explicit</span> <span class="n">Queue</span><span class="p">()</span>
</span><span class='line'>        <span class="o">:</span><span class="n">head_</span><span class="p">(</span><span class="nb">NULL</span><span class="p">),</span> <span class="n">tail_</span><span class="p">(</span><span class="nb">NULL</span><span class="p">),</span> <span class="n">size_</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">explicit</span> <span class="n">Queue</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="o">:</span><span class="n">head_</span><span class="p">(</span><span class="k">new</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">value</span><span class="p">)),</span> <span class="n">tail_</span><span class="p">(</span><span class="n">head_</span><span class="p">),</span> <span class="n">size_</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">explicit</span> <span class="n">Queue</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span> <span class="n">values</span><span class="p">[],</span> <span class="k">const</span> <span class="n">size_t</span><span class="o">&amp;</span> <span class="n">size</span><span class="p">)</span>
</span><span class='line'>        <span class="o">:</span><span class="n">head_</span><span class="p">(</span><span class="nb">NULL</span><span class="p">),</span> <span class="n">tail_</span><span class="p">(</span><span class="nb">NULL</span><span class="p">),</span> <span class="n">size_</span><span class="p">(</span><span class="n">size</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="o">-&gt;</span><span class="n">head_</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">values</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>            <span class="k">this</span><span class="o">-&gt;</span><span class="n">tail_</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">head_</span><span class="p">;</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">node</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">values</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>                <span class="k">this</span><span class="o">-&gt;</span><span class="n">tail_</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">(</span><span class="n">node</span><span class="p">);</span>
</span><span class='line'>                <span class="k">this</span><span class="o">-&gt;</span><span class="n">tail_</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">tail_</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">explicit</span> <span class="n">Queue</span><span class="p">(</span><span class="k">const</span> <span class="n">Queue</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">queue</span><span class="p">)</span>
</span><span class='line'>        <span class="o">:</span><span class="n">head_</span><span class="p">(</span><span class="nb">NULL</span><span class="p">),</span> <span class="n">tail_</span><span class="p">(</span><span class="nb">NULL</span><span class="p">),</span> <span class="n">size_</span><span class="p">(</span><span class="n">queue</span><span class="p">.</span><span class="n">size_</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">size_</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="n">head_</span><span class="p">;</span>
</span><span class='line'>            <span class="k">this</span><span class="o">-&gt;</span><span class="n">head_</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">());</span>
</span><span class='line'>            <span class="k">this</span><span class="o">-&gt;</span><span class="n">tail_</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">head_</span><span class="p">;</span>
</span><span class='line'>            <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>            <span class="k">while</span> <span class="p">(</span><span class="n">p</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">node</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">());</span>
</span><span class='line'>                <span class="k">this</span><span class="o">-&gt;</span><span class="n">tail_</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">(</span><span class="n">node</span><span class="p">);</span>
</span><span class='line'>                <span class="k">this</span><span class="o">-&gt;</span><span class="n">tail_</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">tail_</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>                <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">const</span> <span class="n">Queue</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span>
</span><span class='line'>    <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">Queue</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">queue</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">head_</span> <span class="o">==</span> <span class="n">queue</span><span class="p">.</span><span class="n">head_</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">queue</span><span class="p">.</span><span class="n">size_</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">pleft</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">head_</span><span class="p">;</span>
</span><span class='line'>            <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">pright</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="n">head_</span><span class="p">;</span>
</span><span class='line'>            <span class="k">while</span> <span class="p">(</span><span class="n">pright</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">pleft</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">pleft</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">pright</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">());</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">pleft</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">(</span><span class="n">pright</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">());</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">pright</span> <span class="o">=</span> <span class="n">pright</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>                <span class="k">this</span><span class="o">-&gt;</span><span class="n">tail_</span> <span class="o">=</span> <span class="n">pleft</span><span class="p">;</span>
</span><span class='line'>                <span class="n">pleft</span> <span class="o">=</span> <span class="n">pleft</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">while</span> <span class="p">(</span><span class="n">pleft</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">to_delete</span> <span class="o">=</span> <span class="n">pleft</span><span class="p">;</span>
</span><span class='line'>                <span class="n">pleft</span> <span class="o">=</span> <span class="n">pleft</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>                <span class="k">delete</span> <span class="n">to_delete</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">this</span><span class="o">-&gt;</span><span class="n">tail_</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">this</span><span class="o">-&gt;</span><span class="n">size_</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="n">size_</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">~</span><span class="n">Queue</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">clean</span><span class="p">();</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">friend</span> <span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span>
</span><span class='line'>    <span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="k">const</span> <span class="n">Queue</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">queue</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">seperator</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="n">head_</span><span class="p">;</span>
</span><span class='line'>        <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="sc">&#39;[&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">p</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">seperator</span> <span class="o">&lt;&lt;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">();</span>
</span><span class='line'>            <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>            <span class="n">seperator</span> <span class="o">=</span> <span class="s">&quot; | &quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="sc">&#39;]&#39;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">os</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span>
</span><span class='line'>    <span class="n">head</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">size_</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;The queue is empty!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">head_</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">size_t</span>
</span><span class='line'>    <span class="n">size</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'>    <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">size_</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span>
</span><span class='line'>    <span class="n">enQueue</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">node</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">size_</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="o">-&gt;</span><span class="n">head_</span> <span class="o">=</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'>            <span class="k">this</span><span class="o">-&gt;</span><span class="n">tail_</span> <span class="o">=</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="o">-&gt;</span><span class="n">tail_</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">(</span><span class="n">node</span><span class="p">);</span>
</span><span class='line'>            <span class="k">this</span><span class="o">-&gt;</span><span class="n">tail_</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">tail_</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="o">++</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">size_</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">const</span> <span class="n">T</span>
</span><span class='line'>    <span class="n">deQueue</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">size_</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Cannot pop an empty queue</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>            <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">T</span> <span class="n">value</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">head_</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">();</span>
</span><span class='line'>            <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">to_delete</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">head_</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">size_</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">this</span><span class="o">-&gt;</span><span class="n">head_</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">tail_</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">this</span><span class="o">-&gt;</span><span class="n">head_</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">head_</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">delete</span> <span class="n">to_delete</span><span class="p">;</span>
</span><span class='line'>            <span class="o">--</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">size_</span><span class="p">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">head_</span><span class="p">;</span>
</span><span class='line'>    <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">tail_</span><span class="p">;</span>
</span><span class='line'>    <span class="n">size_t</span> <span class="n">size_</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span>
</span><span class='line'>    <span class="n">clean</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">head_</span><span class="p">;</span>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="n">p</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">to_delete</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>            <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>            <span class="k">delete</span> <span class="n">to_delete</span><span class="p">;</span>
</span><span class='line'>            <span class="o">--</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">size_</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">this</span><span class="o">-&gt;</span><span class="n">head_</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">tail_</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* _QUEUE_H_ */</span><span class="cp"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now this the test code(Using boost unit test framework).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (queue-test.cpp)</span> <a href='/code/queue/queue-test.cpp'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#define BOOST_TEST_DYN_LINK</span>
</span><span class='line'><span class="cp">#define BOOST_TEST_MAIN</span>
</span><span class='line'><span class="cp">#include &lt;boost/test/unit_test.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/test/output_test_stream.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &quot;queue.hpp&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_SUITE</span><span class="p">(</span><span class="n">test_create</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">create_empty</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">queue</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">queue</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
</span><span class='line'>    <span class="n">Queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">queue2</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">queue2</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">create_with_one_element</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">queue_int</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">queue_int</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">queue_int</span><span class="p">.</span><span class="n">head</span><span class="p">(),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Queue</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">queue_char</span><span class="p">(</span><span class="sc">&#39;a&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">queue_char</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">queue_char</span><span class="p">.</span><span class="n">head</span><span class="p">(),</span> <span class="sc">&#39;a&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Queue</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">queue_double</span><span class="p">(</span><span class="mf">1.23</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">queue_double</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">queue_double</span><span class="p">.</span><span class="n">head</span><span class="p">(),</span> <span class="mf">1.23</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Queue</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">queue_str</span><span class="p">(</span><span class="s">&quot;abc&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">queue_str</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">queue_str</span><span class="p">.</span><span class="n">head</span><span class="p">(),</span> <span class="s">&quot;abc&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">create_with_an_array</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">};</span>
</span><span class='line'>    <span class="n">Queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">queue</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>    <span class="n">boost</span><span class="o">::</span><span class="n">test_tools</span><span class="o">::</span><span class="n">output_test_stream</span> <span class="n">output</span><span class="p">;</span>
</span><span class='line'>    <span class="n">output</span> <span class="o">&lt;&lt;</span> <span class="n">queue</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">output</span><span class="p">.</span><span class="n">is_equal</span><span class="p">(</span><span class="s">&quot;[1 | 2 | 3 | 4 | 5]&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">create_copy_empty</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">queue1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">();</span>
</span><span class='line'>    <span class="n">Queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">queue2</span><span class="p">(</span><span class="o">*</span><span class="n">queue1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">delete</span> <span class="n">queue1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">queue2</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">create_copy_one</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">queue1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">queue2</span><span class="p">(</span><span class="o">*</span><span class="n">queue1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">delete</span> <span class="n">queue1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">queue2</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">queue2</span><span class="p">.</span><span class="n">head</span><span class="p">(),</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">create_and_assign</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">};</span>
</span><span class='line'>    <span class="n">Queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">queue1</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">};</span>
</span><span class='line'>    <span class="n">Queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">queue2</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">queue1</span> <span class="o">=</span> <span class="n">queue2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">boost</span><span class="o">::</span><span class="n">test_tools</span><span class="o">::</span><span class="n">output_test_stream</span> <span class="n">output</span><span class="p">;</span>
</span><span class='line'>    <span class="n">output</span> <span class="o">&lt;&lt;</span> <span class="n">queue1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">output</span><span class="p">.</span><span class="n">is_equal</span><span class="p">(</span><span class="s">&quot;[4 | 5]&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">queue1</span> <span class="o">=</span> <span class="n">queue1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">queue1</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">output</span> <span class="o">&lt;&lt;</span> <span class="n">queue1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">output</span><span class="p">.</span><span class="n">is_equal</span><span class="p">(</span><span class="s">&quot;[4 | 5]&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">assign_empty</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">queue1</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">Queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">queue2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">queue1</span> <span class="o">=</span> <span class="n">queue2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">queue1</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">queue1</span> <span class="o">=</span> <span class="n">queue1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">queue1</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_SUITE_END</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_SUITE</span><span class="p">(</span><span class="n">test_output</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">ouput_empty</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">queue</span><span class="p">;</span>
</span><span class='line'>    <span class="n">boost</span><span class="o">::</span><span class="n">test_tools</span><span class="o">::</span><span class="n">output_test_stream</span> <span class="n">output</span><span class="p">;</span>
</span><span class='line'>    <span class="n">output</span> <span class="o">&lt;&lt;</span> <span class="n">queue</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">output</span><span class="p">.</span><span class="n">is_equal</span><span class="p">(</span><span class="s">&quot;[]&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">output_one</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">queue</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">boost</span><span class="o">::</span><span class="n">test_tools</span><span class="o">::</span><span class="n">output_test_stream</span> <span class="n">output</span><span class="p">;</span>
</span><span class='line'>    <span class="n">output</span> <span class="o">&lt;&lt;</span> <span class="n">queue</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">output</span><span class="p">.</span><span class="n">is_equal</span><span class="p">(</span><span class="s">&quot;[2]&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">output</span> <span class="o">&lt;&lt;</span> <span class="n">queue</span><span class="p">.</span><span class="n">head</span><span class="p">();</span>
</span><span class='line'>    <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">output</span><span class="p">.</span><span class="n">is_equal</span><span class="p">(</span><span class="s">&quot;2&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_SUITE_END</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_SUITE</span><span class="p">(</span><span class="n">test_enQueue</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">empty</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">queue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">queue</span><span class="p">.</span><span class="n">enQueue</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">boost</span><span class="o">::</span><span class="n">test_tools</span><span class="o">::</span><span class="n">output_test_stream</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'>    <span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="n">queue</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">out</span><span class="p">.</span><span class="n">is_equal</span><span class="p">(</span><span class="s">&quot;[1]&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">queue</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">normal</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">};</span>
</span><span class='line'>    <span class="n">Queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">queue</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">queue</span><span class="p">.</span><span class="n">enQueue</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">boost</span><span class="o">::</span><span class="n">test_tools</span><span class="o">::</span><span class="n">output_test_stream</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'>    <span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="n">queue</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">out</span><span class="p">.</span><span class="n">is_equal</span><span class="p">(</span><span class="s">&quot;[1 | 1 | 1 | 1 | 1 | 2]&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">queue</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_SUITE_END</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_SUITE</span><span class="p">(</span><span class="n">test_deQueue</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">one</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">queue</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">head</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="n">deQueue</span><span class="p">();</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">queue</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">normal</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">};</span>
</span><span class='line'>    <span class="n">Queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">queue</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">head</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="n">deQueue</span><span class="p">();</span>
</span><span class='line'>    <span class="n">boost</span><span class="o">::</span><span class="n">test_tools</span><span class="o">::</span><span class="n">output_test_stream</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'>    <span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="n">queue</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">out</span><span class="p">.</span><span class="n">is_equal</span><span class="p">(</span><span class="s">&quot;[2 | 3 | 4 | 5]&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">head</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="n">deQueue</span><span class="p">();</span>
</span><span class='line'>    <span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="n">queue</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">out</span><span class="p">.</span><span class="n">is_equal</span><span class="p">(</span><span class="s">&quot;[3 | 4 | 5]&quot;</span><span class="p">));</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">head</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_SUITE_END</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implement a circular linked list]]></title>
    <link href="http://itlodge.github.io/blog/2013/09/21/implement-a-circular-linked-list/"/>
    <updated>2013-09-21T21:57:00+00:00</updated>
    <id>http://itlodge.github.io/blog/2013/09/21/implement-a-circular-linked-list</id>
    <content type="html"><![CDATA[<p>A circular linked list is the same as a singular linked list except that
there last node points to the first node.</p>

<p>Here is the specification of my CiLinkedList.</p>

<ul>
<li><code>CiLinkedList()</code>, Create an empty CiLinkedList.</li>
<li><code>CiLinkedList(const CiLinkedList&amp; list)</code>, Create a CiLinkedList from another
CiLinkedList <code>list</code>.</li>
<li><code>CiLinkedList(const T&amp; value)</code>, Create a CiLinkedList whose first element
is <code>value</code>.</li>
<li><code>CiLinkedList(const T values[], size_t size)</code>, Create a CiLinkedList from
an array <code>values</code> of size <code>size</code>.</li>
<li><code>const CiLinkedList&amp; operator=(const CiLinkedList&amp; list)</code>, Support
CiLinkedList assignment.</li>
<li><code>~CiLinkedList()</code>, Free all the space requested by the CiLinkedList.</li>
<li><code>std::ostream&amp; operator&lt;&lt;(std::ostream&amp;, const CiLinkedList&lt;T&gt;&amp;);</code>,
Output the CiLinkedList in the form <strong>[a, b, c &hellip;]</strong>.</li>
<li><code>const T&amp; operator[](size_t index)</code>, Access the element of the CiLinkedList,
but it&rsquo;s not random accessible.</li>
<li><code>size_t size()</code>, Return the size of the CiLinkedList.</li>
<li><code>rm_dup()</code>, Remove duplicate elements int the CiLinkedList.</li>
</ul>


<p>Here is the code.</p>

<p>The class definition and implementation.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (cilist.hpp)</span> <a href='/code/circular-list/cilist.hpp'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#ifndef _CILIST_H_</span>
</span><span class='line'><span class="cp">#define _CILIST_H_</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cassert&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Node</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">explicit</span> <span class="n">Node</span><span class="p">()</span>
</span><span class='line'>        <span class="o">:</span><span class="n">value_</span><span class="p">(),</span> <span class="n">next_</span><span class="p">(</span><span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">explicit</span> <span class="n">Node</span><span class="p">(</span><span class="k">const</span> <span class="n">Node</span><span class="o">&amp;</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'>        <span class="o">:</span><span class="n">value_</span><span class="p">(</span><span class="n">n</span><span class="p">.</span><span class="n">value_</span><span class="p">),</span> <span class="n">next_</span><span class="p">(</span><span class="n">n</span><span class="p">.</span><span class="n">next_</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">explicit</span> <span class="n">Node</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">value</span><span class="p">,</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">next</span><span class="o">=</span><span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">-&gt;</span><span class="n">value_</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">-&gt;</span><span class="n">next_</span> <span class="o">=</span> <span class="n">next</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">Node</span><span class="o">&amp;</span>
</span><span class='line'>    <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">Node</span><span class="o">&amp;</span> <span class="n">n</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">-&gt;</span><span class="n">value_</span> <span class="o">=</span> <span class="n">n</span><span class="p">.</span><span class="n">value_</span><span class="p">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">-&gt;</span><span class="n">next_</span> <span class="o">=</span> <span class="n">n</span><span class="p">.</span><span class="n">next_</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="o">~</span><span class="n">Node</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">friend</span> <span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span>
</span><span class='line'>    <span class="k">operator</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="k">const</span> <span class="n">Node</span><span class="o">&amp;</span> <span class="n">node</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span> <span class="k">return</span> <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">node</span><span class="p">.</span><span class="n">value_</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span>
</span><span class='line'>    <span class="n">value</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'>    <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">value_</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span>
</span><span class='line'>    <span class="n">next</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'>    <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">next_</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Set the &#39;next_&#39; pointer to the pointer NEXT.</span>
</span><span class='line'>    <span class="kt">void</span>
</span><span class='line'>    <span class="n">next</span><span class="p">(</span><span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">next</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">next_</span> <span class="o">=</span> <span class="n">next</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">next_</span><span class="p">;</span>
</span><span class='line'>    <span class="n">T</span> <span class="n">value_</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">CiLinkedList</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="k">explicit</span> <span class="n">CiLinkedList</span><span class="p">()</span>
</span><span class='line'>        <span class="o">:</span><span class="n">head_</span><span class="p">(</span><span class="nb">NULL</span><span class="p">),</span> <span class="n">size_</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">explicit</span> <span class="n">CiLinkedList</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="o">:</span><span class="n">head_</span><span class="p">(</span><span class="k">new</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">value</span><span class="p">)),</span> <span class="n">size_</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">head_</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">head_</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">explicit</span> <span class="n">CiLinkedList</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span> <span class="n">values</span><span class="p">[],</span> <span class="k">const</span> <span class="n">size_t</span><span class="o">&amp;</span> <span class="n">size</span><span class="p">)</span>
</span><span class='line'>	<span class="o">:</span><span class="n">head_</span><span class="p">(</span><span class="nb">NULL</span><span class="p">),</span> <span class="n">size_</span><span class="p">(</span><span class="n">size</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>	<span class="k">if</span> <span class="p">(</span><span class="n">size</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>	    <span class="k">this</span><span class="o">-&gt;</span><span class="n">head_</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">values</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>	    <span class="k">this</span><span class="o">-&gt;</span><span class="n">head_</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">head_</span><span class="p">);</span>
</span><span class='line'>	<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>	    <span class="k">this</span><span class="o">-&gt;</span><span class="n">head_</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">values</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>	    <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">head_</span><span class="p">;</span>
</span><span class='line'>	    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>		<span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">node</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">values</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>		<span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">(</span><span class="n">node</span><span class="p">);</span>
</span><span class='line'>		<span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>	    <span class="p">}</span>
</span><span class='line'>	    <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">head_</span><span class="p">);</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">explicit</span> <span class="n">CiLinkedList</span><span class="p">(</span><span class="k">const</span> <span class="n">CiLinkedList</span><span class="o">&amp;</span> <span class="n">list</span><span class="p">)</span>
</span><span class='line'>	<span class="o">:</span><span class="n">head_</span><span class="p">(</span><span class="nb">NULL</span><span class="p">),</span> <span class="n">size_</span><span class="p">(</span><span class="n">list</span><span class="p">.</span><span class="n">size_</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>	<span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">pright</span> <span class="o">=</span> <span class="n">list</span><span class="p">.</span><span class="n">head_</span><span class="p">;</span>
</span><span class='line'>	<span class="k">if</span> <span class="p">(</span><span class="n">pright</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>	    <span class="k">this</span><span class="o">-&gt;</span><span class="n">head_</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">pright</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">());</span>
</span><span class='line'>	    <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">pleft</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">head_</span><span class="p">;</span>
</span><span class='line'>	    <span class="k">while</span> <span class="p">(</span><span class="n">pright</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">()</span> <span class="o">!=</span> <span class="n">list</span><span class="p">.</span><span class="n">head_</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>		<span class="n">pright</span> <span class="o">=</span> <span class="n">pright</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>		<span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">node</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">pright</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">());</span>
</span><span class='line'>		<span class="n">pleft</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">(</span><span class="n">node</span><span class="p">);</span>
</span><span class='line'>		<span class="n">pleft</span> <span class="o">=</span> <span class="n">pleft</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>	    <span class="p">}</span>
</span><span class='line'>	    <span class="n">pleft</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">head_</span><span class="p">);</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>	
</span><span class='line'>    <span class="k">const</span> <span class="n">CiLinkedList</span><span class="o">&amp;</span>
</span><span class='line'>    <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">CiLinkedList</span><span class="o">&amp;</span> <span class="n">list</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>	<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">head_</span> <span class="o">==</span> <span class="n">list</span><span class="p">.</span><span class="n">head_</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>	    <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>	<span class="k">this</span><span class="o">-&gt;</span><span class="n">clean</span><span class="p">();</span>
</span><span class='line'>	<span class="k">this</span><span class="o">-&gt;</span><span class="n">size_</span> <span class="o">=</span> <span class="n">list</span><span class="p">.</span><span class="n">size_</span><span class="p">;</span>
</span><span class='line'>	<span class="k">if</span> <span class="p">(</span><span class="n">list</span><span class="p">.</span><span class="n">head_</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>	    <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">list</span><span class="p">.</span><span class="n">head_</span><span class="p">;</span>
</span><span class='line'>	    <span class="k">this</span><span class="o">-&gt;</span><span class="n">head_</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">());</span>
</span><span class='line'>	    <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">thisp</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">head_</span><span class="p">;</span>
</span><span class='line'>	    <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>	    <span class="k">while</span> <span class="p">(</span><span class="n">p</span> <span class="o">!=</span> <span class="n">list</span><span class="p">.</span><span class="n">head_</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>		<span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">node</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">());</span>
</span><span class='line'>		<span class="n">thisp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">(</span><span class="n">node</span><span class="p">);</span>
</span><span class='line'>		<span class="n">thisp</span> <span class="o">=</span> <span class="n">thisp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>		<span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>	    <span class="p">}</span>
</span><span class='line'>	    <span class="n">thisp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">head_</span><span class="p">);</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>	<span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>	
</span><span class='line'>    <span class="o">~</span><span class="n">CiLinkedList</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">clean</span><span class="p">();</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">const</span> <span class="n">size_t</span><span class="o">&amp;</span>
</span><span class='line'>    <span class="n">size</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'>    <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">size_</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span>
</span><span class='line'>    <span class="k">operator</span><span class="p">[](</span><span class="k">const</span> <span class="n">size_t</span><span class="o">&amp;</span> <span class="n">index</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>	<span class="n">assert</span><span class="p">(</span><span class="n">index</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">index</span> <span class="o">&lt;=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">size_</span><span class="p">);</span>
</span><span class='line'>	<span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>	<span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">head_</span><span class="p">;</span>
</span><span class='line'>	<span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">index</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>	    <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>	    <span class="o">++</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>	<span class="k">return</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>	
</span><span class='line'>    <span class="k">friend</span> <span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span>
</span><span class='line'>    <span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="k">const</span> <span class="n">CiLinkedList</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">list</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>	<span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">list</span><span class="p">.</span><span class="n">head_</span><span class="p">;</span>
</span><span class='line'>	<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">seperator</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>	<span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="sc">&#39;[&#39;</span><span class="p">;</span>
</span><span class='line'>	<span class="k">if</span> <span class="p">(</span><span class="n">p</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>	    <span class="k">while</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">()</span> <span class="o">!=</span> <span class="n">list</span><span class="p">.</span><span class="n">head_</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>		<span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">seperator</span> <span class="o">&lt;&lt;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">();</span>
</span><span class='line'>		<span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>		<span class="n">seperator</span> <span class="o">=</span> <span class="s">&quot;, &quot;</span><span class="p">;</span>
</span><span class='line'>	    <span class="p">}</span>
</span><span class='line'>	    <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">seperator</span> <span class="o">&lt;&lt;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">();</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>	<span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="sc">&#39;]&#39;</span><span class="p">;</span>
</span><span class='line'>	<span class="k">return</span> <span class="n">os</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span>
</span><span class='line'>    <span class="n">rm_dup</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>	<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">size_</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>	    <span class="k">return</span><span class="p">;</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>	<span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">head_</span><span class="p">;</span>
</span><span class='line'>	<span class="k">while</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">()</span> <span class="o">!=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">head_</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>	    <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">pprev</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>	    <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">pnext</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>	    <span class="k">while</span> <span class="p">(</span><span class="n">pnext</span> <span class="o">!=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">head_</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>		<span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">()</span> <span class="o">==</span> <span class="n">pnext</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>		    <span class="n">pprev</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">(</span><span class="n">pnext</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">());</span>
</span><span class='line'>		    <span class="k">delete</span> <span class="n">pnext</span><span class="p">;</span>
</span><span class='line'>		    <span class="o">--</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">size_</span><span class="p">;</span>
</span><span class='line'>		    <span class="n">pnext</span> <span class="o">=</span> <span class="n">pprev</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>		    <span class="n">pprev</span> <span class="o">=</span> <span class="n">pnext</span><span class="p">;</span>
</span><span class='line'>		    <span class="n">pnext</span> <span class="o">=</span> <span class="n">pprev</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>	    <span class="p">}</span>
</span><span class='line'>	    <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>    <span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">head_</span><span class="p">;</span>
</span><span class='line'>    <span class="n">size_t</span> <span class="n">size_</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span>
</span><span class='line'>    <span class="n">clean</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>	<span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">head_</span><span class="p">;</span>
</span><span class='line'>	<span class="k">while</span> <span class="p">(</span><span class="n">p</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>	    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">size_</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>		<span class="k">delete</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>		<span class="o">--</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">size_</span><span class="p">;</span>
</span><span class='line'>		<span class="k">break</span><span class="p">;</span>
</span><span class='line'>	    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">p</span> <span class="o">==</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">head_</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>		<span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">temp</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>		<span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>		<span class="n">temp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>	    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>		<span class="n">Node</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">to_delete</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'>		<span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">();</span>
</span><span class='line'>		<span class="k">delete</span> <span class="n">to_delete</span><span class="p">;</span>
</span><span class='line'>		<span class="o">--</span><span class="k">this</span><span class="o">-&gt;</span><span class="n">size_</span><span class="p">;</span>
</span><span class='line'>	    <span class="p">}</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'>	<span class="k">this</span><span class="o">-&gt;</span><span class="n">head_</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* _CILIST_H_ */</span><span class="cp"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now this the test code(Using boost unit test framework).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (cilist-test.cpp)</span> <a href='/code/circular-list/cilist-test.cpp'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#define BOOST_TEST_DYN_LINK</span>
</span><span class='line'><span class="cp">#define BOOST_TEST_MAIN</span>
</span><span class='line'><span class="cp">#include &lt;boost/test/unit_test.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;boost/test/output_test_stream.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &quot;cilist.hpp&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_SUITE</span><span class="p">(</span><span class="n">test_create</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">create_empty</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CiLinkedList</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">list</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">list</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span>
</span><span class='line'>    <span class="n">CiLinkedList</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">list2</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">list2</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">create_with_one_element</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CiLinkedList</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">list_int</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">list_int</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">list_int</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CiLinkedList</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">list_char</span><span class="p">(</span><span class="sc">&#39;a&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">list_char</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">list_char</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="sc">&#39;a&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CiLinkedList</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">list_double</span><span class="p">(</span><span class="mf">1.23</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">list_double</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">list_double</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mf">1.23</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CiLinkedList</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">list_str</span><span class="p">(</span><span class="s">&quot;abc&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">list_str</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">list_str</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="s">&quot;abc&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">create_with_an_array</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">};</span>
</span><span class='line'>    <span class="n">CiLinkedList</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">list</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>    <span class="n">boost</span><span class="o">::</span><span class="n">test_tools</span><span class="o">::</span><span class="n">output_test_stream</span> <span class="n">output</span><span class="p">;</span>
</span><span class='line'>    <span class="n">output</span> <span class="o">&lt;&lt;</span> <span class="n">list</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">output</span><span class="p">.</span><span class="n">is_equal</span><span class="p">(</span><span class="s">&quot;[1, 2, 3, 4, 5]&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">create_copy_empty</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CiLinkedList</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">list1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CiLinkedList</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">();</span>
</span><span class='line'>    <span class="n">CiLinkedList</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">list2</span><span class="p">(</span><span class="o">*</span><span class="n">list1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">delete</span> <span class="n">list1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">list2</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">create_copy_one</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CiLinkedList</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">*</span><span class="n">list1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CiLinkedList</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CiLinkedList</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">list2</span><span class="p">(</span><span class="o">*</span><span class="n">list1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">delete</span> <span class="n">list1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">list2</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">list2</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">create_and_assign</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">};</span>
</span><span class='line'>    <span class="n">CiLinkedList</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">list1</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">};</span>
</span><span class='line'>    <span class="n">CiLinkedList</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">list2</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">list1</span> <span class="o">=</span> <span class="n">list2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">list1</span> <span class="o">=</span> <span class="n">list1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">list1</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">boost</span><span class="o">::</span><span class="n">test_tools</span><span class="o">::</span><span class="n">output_test_stream</span> <span class="n">output</span><span class="p">;</span>
</span><span class='line'>    <span class="n">output</span> <span class="o">&lt;&lt;</span> <span class="n">list1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">output</span><span class="p">.</span><span class="n">is_equal</span><span class="p">(</span><span class="s">&quot;[4, 5]&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">assign_empty</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CiLinkedList</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">list1</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CiLinkedList</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">list2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">list1</span> <span class="o">=</span> <span class="n">list2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">list1</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">list1</span> <span class="o">=</span> <span class="n">list1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">list1</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_SUITE_END</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_SUITE</span><span class="p">(</span><span class="n">test_output</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">ouput_empty</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CiLinkedList</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">list</span><span class="p">;</span>
</span><span class='line'>    <span class="n">boost</span><span class="o">::</span><span class="n">test_tools</span><span class="o">::</span><span class="n">output_test_stream</span> <span class="n">output</span><span class="p">;</span>
</span><span class='line'>    <span class="n">output</span> <span class="o">&lt;&lt;</span> <span class="n">list</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">output</span><span class="p">.</span><span class="n">is_equal</span><span class="p">(</span><span class="s">&quot;[]&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">output_one</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CiLinkedList</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">list</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">boost</span><span class="o">::</span><span class="n">test_tools</span><span class="o">::</span><span class="n">output_test_stream</span> <span class="n">output</span><span class="p">;</span>
</span><span class='line'>    <span class="n">output</span> <span class="o">&lt;&lt;</span> <span class="n">list</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">output</span><span class="p">.</span><span class="n">is_equal</span><span class="p">(</span><span class="s">&quot;[2]&quot;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">output</span> <span class="o">&lt;&lt;</span> <span class="n">list</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">output</span><span class="p">.</span><span class="n">is_equal</span><span class="p">(</span><span class="s">&quot;2&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_SUITE_END</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_SUITE</span><span class="p">(</span><span class="n">test_remove_duplicate</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">remove_empty</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CiLinkedList</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">list</span><span class="p">;</span>
</span><span class='line'>    <span class="n">list</span><span class="p">.</span><span class="n">rm_dup</span><span class="p">();</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">list</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">remove_one_element_list</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">CiLinkedList</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">list</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>    <span class="n">list</span><span class="p">.</span><span class="n">rm_dup</span><span class="p">();</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">list</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">list</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">2</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">remove_all_duplicate</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">};</span>
</span><span class='line'>    <span class="n">CiLinkedList</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">list</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>    <span class="n">list</span><span class="p">.</span><span class="n">rm_dup</span><span class="p">();</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">list</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">list</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">remove_one_duplicate</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">};</span>
</span><span class='line'>    <span class="n">CiLinkedList</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">list</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>    <span class="n">list</span><span class="p">.</span><span class="n">rm_dup</span><span class="p">();</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">list</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">9</span><span class="p">);</span>
</span><span class='line'>    <span class="n">boost</span><span class="o">::</span><span class="n">test_tools</span><span class="o">::</span><span class="n">output_test_stream</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'>    <span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="n">list</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">out</span><span class="p">.</span><span class="n">is_equal</span><span class="p">(</span><span class="s">&quot;[1, 2, 3, 4, 5, 6, 7, 8, 9]&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_CASE</span><span class="p">(</span><span class="n">circular_duplicate</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">};</span>
</span><span class='line'>    <span class="n">CiLinkedList</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">list</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>    <span class="n">list</span><span class="p">.</span><span class="n">rm_dup</span><span class="p">();</span>
</span><span class='line'>    <span class="n">BOOST_CHECK_EQUAL</span><span class="p">(</span><span class="n">list</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>    <span class="n">boost</span><span class="o">::</span><span class="n">test_tools</span><span class="o">::</span><span class="n">output_test_stream</span> <span class="n">out</span><span class="p">;</span>
</span><span class='line'>    <span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="n">list</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BOOST_CHECK</span><span class="p">(</span><span class="n">out</span><span class="p">.</span><span class="n">is_equal</span><span class="p">(</span><span class="s">&quot;[1, 2, 3, 4, 5]&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BOOST_AUTO_TEST_SUITE_END</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
